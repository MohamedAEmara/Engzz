(()=>{"use strict";var n={28:(n,e,t)=>{t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,'body, html {\n    padding: 0;\n    margin: 0;\n    height: 100%;\n}\n#all {\n    display: grid;\n    grid-template-areas:\n      "header header"\n      "sidebar content"\n      "footer footer";\n    grid-template-columns: 1fr 3fr; /* Adjust column widths as needed */\n    grid-template-rows: auto 1fr auto; /* Adjust row heights as needed */\n    min-height: 100vh; /* Ensures the layout fills the entire viewport */\n  }\n  \n  .header {\n    grid-area: header;\n    /* Styles for the header */\n  }\n  \n  .sidebar {\n    grid-area: sidebar;\n    /* Styles for the sidebar */\n    background-color: orange;\n    display: flex;\n    flex-direction: column;\n}\n  \n  .content {\n    grid-area: content;\n    /* Styles for the main content */\n    background-color: cadetblue;\n}\n  \n  .footer {\n    grid-area: footer;\n    /* Styles for the footer */\n    background-color: gray;\n}\n\n#footerIcon {\n    width: 40px;\n}  \n\n.header {\n    display: flex;\n    font-size: 60px;\n\n    align-items: center;\n    gap: 25px;\n}\n\n#headerIcon {\n    width: 100px;\n\n}\n\n\n\n.footer {\n\n    display: flex;\n    align-items: center;\n    gap: 15px;\n    justify-content: center;\n\n}\n\n.sidebar > div.top {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    font-size: large;\n}\n\n/* #text {\n    margin-left: 20%;\n} */\n.lists > div.title {\n    font-size: 40px;\n}\n\n#inbox, #today, #week {\n    margin-left: 5%;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n#todayIcon, #weekIcon, #inboxIcon {\n    width: 40px;\n}\n\n.top {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin-bottom: 30px;\n    margin-top: 10px;\n}\n\n.bottom {\n    display: flex;\n    align-items: center;\n}\n\ninput {\n    /* text-align: center; */\n    border-radius: 5px;\n    height: 25px;\n}\n\nbutton {\n    height: 30px;\n    border-radius: 5px;\n}\n\n#content {\n    display: flex;\n    flex-direction: column;\n}\n\n#content > * {\n    display: flex;\n    justify-content: space-around;\n}\n  /* Media query for responsive adjustments */\n  /* @media screen and (max-width: 768px) {\n    .grid-container {\n      grid-template-areas:\n        "header"\n        "content"\n        "sidebar"\n        "footer";\n      grid-template-columns: 1fr; \n      grid-template-rows: auto 1fr auto auto; \n    }\n  }\n   */\n\n.content {\n    position: relative;\n}\n\n\n\n#addTask {\n    background-color: red;\n    /* margin-top: min(200%, ; */\n    /* margin-bottom: 10px; */\n    position: absolute;\n    bottom: 10px;\n    right: 10px;\n    border-radius: 50px;\n    width: 50px;\n    height: 50px;\n    color: white;\n    font-size: 40px;\n    text-align: center;\n}\n\nform#popup {\n    display: none;\n}\n\n#popup.active {\n    position: absolute;\n    top: 30%;\n    margin-right: 15%;\n    margin-left: 15%;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: black;\n    color: white;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    border-radius: 20px;\n    margin-bottom: 25%;\n}\n\n#all.disable {\n    filter: blur(10px);\n}',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;IACT,YAAY;AAChB;AACA;IACI,aAAa;IACb;;;qBAGiB;IACjB,8BAA8B,EAAE,mCAAmC;IACnE,iCAAiC,EAAE,iCAAiC;IACpE,iBAAiB,EAAE,iDAAiD;EACtE;;EAEA;IACE,iBAAiB;IACjB,0BAA0B;EAC5B;;EAEA;IACE,kBAAkB;IAClB,2BAA2B;IAC3B,wBAAwB;IACxB,aAAa;IACb,sBAAsB;AAC1B;;EAEE;IACE,kBAAkB;IAClB,gCAAgC;IAChC,2BAA2B;AAC/B;;EAEE;IACE,iBAAiB;IACjB,0BAA0B;IAC1B,sBAAsB;AAC1B;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,eAAe;;IAEf,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,YAAY;;AAEhB;;;;AAIA;;IAEI,aAAa;IACb,mBAAmB;IACnB,SAAS;IACT,uBAAuB;;AAE3B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;;GAEG;AACH;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;AACA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,wBAAwB;IACxB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,6BAA6B;AACjC;EACE,2CAA2C;EAC3C;;;;;;;;;;;IAWE;;AAEJ;IACI,kBAAkB;AACtB;;;;AAIA;IACI,qBAAqB;IACrB,4BAA4B;IAC5B,yBAAyB;IACzB,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,mBAAmB;IACnB,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,iBAAiB;IACjB,gBAAgB;IAChB,OAAO;IACP,QAAQ;IACR,SAAS;IACT,uBAAuB;IACvB,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB",sourcesContent:['body, html {\r\n    padding: 0;\r\n    margin: 0;\r\n    height: 100%;\r\n}\r\n#all {\r\n    display: grid;\r\n    grid-template-areas:\r\n      "header header"\r\n      "sidebar content"\r\n      "footer footer";\r\n    grid-template-columns: 1fr 3fr; /* Adjust column widths as needed */\r\n    grid-template-rows: auto 1fr auto; /* Adjust row heights as needed */\r\n    min-height: 100vh; /* Ensures the layout fills the entire viewport */\r\n  }\r\n  \r\n  .header {\r\n    grid-area: header;\r\n    /* Styles for the header */\r\n  }\r\n  \r\n  .sidebar {\r\n    grid-area: sidebar;\r\n    /* Styles for the sidebar */\r\n    background-color: orange;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n  \r\n  .content {\r\n    grid-area: content;\r\n    /* Styles for the main content */\r\n    background-color: cadetblue;\r\n}\r\n  \r\n  .footer {\r\n    grid-area: footer;\r\n    /* Styles for the footer */\r\n    background-color: gray;\r\n}\r\n\r\n#footerIcon {\r\n    width: 40px;\r\n}  \r\n\r\n.header {\r\n    display: flex;\r\n    font-size: 60px;\r\n\r\n    align-items: center;\r\n    gap: 25px;\r\n}\r\n\r\n#headerIcon {\r\n    width: 100px;\r\n\r\n}\r\n\r\n\r\n\r\n.footer {\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 15px;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n.sidebar > div.top {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n    font-size: large;\r\n}\r\n\r\n/* #text {\r\n    margin-left: 20%;\r\n} */\r\n.lists > div.title {\r\n    font-size: 40px;\r\n}\r\n\r\n#inbox, #today, #week {\r\n    margin-left: 5%;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n#todayIcon, #weekIcon, #inboxIcon {\r\n    width: 40px;\r\n}\r\n\r\n.top {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    margin-bottom: 30px;\r\n    margin-top: 10px;\r\n}\r\n\r\n.bottom {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\ninput {\r\n    /* text-align: center; */\r\n    border-radius: 5px;\r\n    height: 25px;\r\n}\r\n\r\nbutton {\r\n    height: 30px;\r\n    border-radius: 5px;\r\n}\r\n\r\n#content {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n#content > * {\r\n    display: flex;\r\n    justify-content: space-around;\r\n}\r\n  /* Media query for responsive adjustments */\r\n  /* @media screen and (max-width: 768px) {\r\n    .grid-container {\r\n      grid-template-areas:\r\n        "header"\r\n        "content"\r\n        "sidebar"\r\n        "footer";\r\n      grid-template-columns: 1fr; \r\n      grid-template-rows: auto 1fr auto auto; \r\n    }\r\n  }\r\n   */\r\n\r\n.content {\r\n    position: relative;\r\n}\r\n\r\n\r\n\r\n#addTask {\r\n    background-color: red;\r\n    /* margin-top: min(200%, ; */\r\n    /* margin-bottom: 10px; */\r\n    position: absolute;\r\n    bottom: 10px;\r\n    right: 10px;\r\n    border-radius: 50px;\r\n    width: 50px;\r\n    height: 50px;\r\n    color: white;\r\n    font-size: 40px;\r\n    text-align: center;\r\n}\r\n\r\nform#popup {\r\n    display: none;\r\n}\r\n\r\n#popup.active {\r\n    position: absolute;\r\n    top: 30%;\r\n    margin-right: 15%;\r\n    margin-left: 15%;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: black;\r\n    color: white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    border-radius: 20px;\r\n    margin-bottom: 25%;\r\n}\r\n\r\n#all.disable {\r\n    filter: blur(10px);\r\n}'],sourceRoot:""}]);const d=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(a[c]=!0)}for(var l=0;l<n.length;l++){var s=[].concat(n[l]);r&&a[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),e.push(s))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],d=0;d<n.length;d++){var c=n[d],l=r.base?c[0]+r.base:c[0],s=i[l]||0,A="".concat(l," ").concat(s);i[l]=s+1;var p=t(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=o(u,r);r.byIndex=d,e.splice(d,0,{identifier:A,updater:m,references:1})}a.push(A)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var d=t(i[a]);e[d].references--}for(var c=r(n,o),l=0;l<i.length;l++){var s=t(i[l]);0===e[s].references&&(e[s].updater(),e.splice(s,1))}i=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!n;)n=r[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),d=t.n(a),c=t(565),l=t.n(c),s=t(216),A=t.n(s),p=t(589),u=t.n(p),m=t(28),f={};f.styleTagTransform=u(),f.setAttributes=l(),f.insert=d().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=A(),e()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const g=t.p+"8bc44318e2afab2d0d1b.png",h=t.p+"f11021803f68852df283.png",B=t.p+"173e1701ab4219d55d04.png",I=t.p+"b6251d9c12cb15ca1053.png",C=t.p+"68ee9be4bf2ae86f6bd0.png";let y=[];class b{constructor(n,e,t,r="noSection"){this.id=y.length,this.title=n,this.date=e,this.priority=t,this.list=r,this.complete=!1,this.createTask(this)}createTask(){y.push(this)}}const E=[];class v{constructor(n){this.id=E.length,this.name=n,this.createProject()}createProject(){E.push(this)}}const x=document.getElementById("lists");function k(){for(;x.hasChildNodes();)x.removeChild(x.firstChild);E.forEach((function(n){console.log("showProjects called !!!!");const e=document.createElement("div");e.classList.add("project"),e.innerHTML=n.name,x.appendChild(e)}))}const w=document.querySelectorAll(".project");for(i of w)i.addEventListener("click",(function(){console.log(this)}));const T=document.getElementById("content"),j=document.getElementById("content");const L=document.getElementById("addList"),S=document.getElementById("inbox"),M=document.getElementById("content");console.log("beginning"),document.getElementById("headerText");const H=document.getElementById("headerIcon"),Y=(document.getElementById("footerText"),document.getElementById("footerIcon")),P=document.getElementById("inboxIcon"),N=document.getElementById("todayIcon"),z=document.getElementById("weekIcon");document.getElementById("inbox"),document.getElementById("content"),document.getElementById("popup"),document.getElementById("all"),document.getElementById("addProjectBtn"),document.getElementById("addProjectInput"),function(){const n=document.getElementById("popup"),e=document.getElementById("all");document.getElementById("submitPopup").addEventListener("click",(t=>{t.preventDefault();const r=document.getElementById("taskName");let o=r.value;const i=document.getElementById("dueDate");let a=i.value,d=document.getElementById("options").value;if(null==o||""==o||null==a||""==a)alert("please fill all fileds to add the task");else{console.log("valid input");let t=content.firstChild.textContent;const c=new b(o,a,d,t);r.value="",i.value="",console.log(c),n.classList.remove("active"),e.classList.remove("disable")}}))}(),function(){const n=document.getElementById("popup"),e=document.getElementById("all");document.getElementById("cancelTaskFrom").addEventListener("click",(t=>{t.preventDefault(),n.classList.remove("active"),e.classList.remove("disable")}))}(),console.log("out"),L.addEventListener("submit",(n=>{if(n.preventDefault(),console.log("btn clicked"),console.log("textContent = "+addProjectInput.value),""!=addProjectInput.value){new v(addProjectInput.value),addProjectInput.value="",console.log("done successfully!"),k();const n=document.querySelectorAll(".project");console.log("# of .project elements = "+n.length),n.forEach((n=>{console.log(n),n.addEventListener("click",(function(){console.log(this),function(n){var e;j.innerHTML=n.innerHTML,e=n.innerHTML,y.forEach((n=>{if(n.list==e){const e=document.createElement("div"),t=document.createElement("div"),r=document.createElement("div"),o=document.createElement("div"),i=document.createElement("button");e.classList.add("task"),t.innerHTML=n.title,r.innerHTML=n.date,o.innerHTML=n.priority,i.innerHTML=" ",e.appendChild(t),e.appendChild(r),e.appendChild(o),e.appendChild(i),T.appendChild(e)}})),console.log("from showRelatedTasks");const t=document.createElement("button");t.setAttribute("id","addTask"),t.innerHTML="+",j.appendChild(t)}(n);const e=document.getElementById("addTask"),t=document.getElementById("popup"),r=document.getElementById("all");console.log("in handle click add task btn"),e.addEventListener("click",(()=>{console.log("add task clicked"),t.classList.add("active"),r.classList.add("disable")}))}))}))}})),S.addEventListener("click",(function(){for(;M.hasChildNodes();)M.removeChild(M.childNodes[0]);y.forEach((n=>{const e=document.createElement("div"),t=document.createElement("div"),r=document.createElement("div"),o=document.createElement("div"),i=document.createElement("button");e.classList.add("task"),t.innerHTML=n.title,r.innerHTML=n.date,o.innerHTML=n.priority,i.innerHTML=" ",e.appendChild(t),e.appendChild(r),e.appendChild(o),e.appendChild(i),M.appendChild(e)}))})),H.src=g,Y.src=h,P.src=B,N.src=C,z.src=I,new b("sldfjkf",11,33),new b("dfffff",5555,666),console.log(y),y.forEach((function(n){console.log("showTasks called !!!!");const e=document.createElement("div"),t=document.createElement("div"),r=document.createElement("div");content.appendChild(e),e.appendChild(t),e.appendChild(r),t.innerHTML=n.title,r.innerHTML=n.date})),function(){let n=new Date,e=n.getFullYear(),t=n.getMonth()+1,r=n.getDate();t<10&&(t="0"+t),r<10&&(r="0"+r);const o=e+"-"+t+"-"+r,i=document.getElementById("today");console.log("listened"),i.addEventListener("click",(function(){const n=document.getElementById("content");for(;n.hasChildNodes();)n.removeChild(n.childNodes[0]);y.forEach((e=>{if(o==e.date){console.log("yessssssssssssssssssss");const t=document.createElement("div"),r=document.createElement("div"),o=document.createElement("div"),i=document.createElement("div"),a=document.createElement("button");t.classList.add("task"),r.innerHTML=e.title,o.innerHTML=e.date,i.innerHTML=e.priority,a.innerHTML=" ",t.appendChild(r),t.appendChild(o),t.appendChild(i),t.appendChild(a),n.appendChild(t)}else console.log(e.date+"  "+o)}))}))}(),new v("Courses"),new v("Home"),k()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,