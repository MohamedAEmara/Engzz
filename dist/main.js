(()=>{"use strict";var e={28:(e,n,t)=>{t.d(n,{Z:()=>m});var r=t(537),a=t.n(r),o=t(645),i=t.n(o),u=t(667),s=t.n(u),l=new URL(t(796),t.b),c=new URL(t(42),t.b),d=new URL(t(678),t.b),f=new URL(t(670),t.b),h=i()(a()),A=s()(l),v=s()(c),g=s()(d),p=s()(f);h.push([e.id,`@font-face {\n    font-family: "font1";\n    src: url(${A});\n}\n@font-face {\n    font-family: "font2";\n    src: url(${v});\n}\n@font-face {\n    font-family: "font3";\n    src: url(${g});\n}\n@font-face {\n    font-family: "font4";\n    src: url(${p});\n}\n\nbody, html {\n    padding: 0;\n    margin: 0;\n    height: 100%;\n}\n#all {\n    display: grid;\n    grid-template-areas:\n      "header header"\n      "sidebar content"\n      "footer footer";\n    grid-template-columns: 1fr 5fr; /* Adjust column widths as needed */\n    grid-template-rows: auto 1fr auto; /* Adjust row heights as needed */\n    min-height: 100vh; /* Ensures the layout fills the entire viewport */\n  }\n  \n  .header {\n    grid-area: header;\n    /* Styles for the header */\n  }\n  \n  .sidebar {\n    grid-area: sidebar;\n    /* Styles for the sidebar */\n    /* background-color: orange; */\n    display: flex;\n    flex-direction: column;\n}\n  \n  .content {\n    grid-area: content;\n    /* Styles for the main content */\n    /* background-color: cadetblue; */\n}\n  \n  .footer {\n    grid-area: footer;\n    /* Styles for the footer */\n    background-color: gray;\n}\n\n#footerIcon {\n    width: 40px;\n}  \n\n.header {\n    display: flex;\n    font-size: 60px;\n\n    align-items: center;\n    gap: 25px;\n}\n\n#headerIcon {\n    width: 100px;\n\n}\n\n\n\n.footer {\n\n    display: flex;\n    align-items: center;\n    gap: 15px;\n    justify-content: center;\n\n}\n\n.sidebar > div.top {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    font-size: large;\n}\n\n/* #text {\n    margin-left: 20%;\n} */\n.lists > div.title {\n    font-size: 40px;\n}\n\n#inbox, #today, #week {\n    margin-left: 5%;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n#todayIcon, #weekIcon, #inboxIcon {\n    width: 40px;\n}\n\n.top {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin-bottom: 30px;\n    margin-top: 10px;\n}\n\n.bottom {\n    display: flex;\n    align-items: center;\n}\n\ninput {\n    /* text-align: center; */\n    border-radius: 5px;\n    height: 25px;\n}\n\nbutton {\n    height: 30px;\n    border-radius: 5px;\n}\n\n#content {\n    display: flex;\n    flex-direction: column;\n}\n\n\n  /* Media query for responsive adjustments */\n  /* @media screen and (max-width: 768px) {\n    .grid-container {\n      grid-template-areas:\n        "header"\n        "content"\n        "sidebar"\n        "footer";\n      grid-template-columns: 1fr; \n      grid-template-rows: auto 1fr auto auto; \n    }\n  }\n   */\n\n.content {\n    position: relative;\n}\n\n\n\n#addTask {\n    /* background-color: red; */\n    background: #F0BD8B 0% 0% no-repeat padding-box;\n\n    /* margin-top: min(200%, ; */\n    /* margin-bottom: 10px; */\n    position: absolute;\n    bottom: 15px;\n    right: 15px;\n    border-radius: 50px;\n    width: 60px;\n    height: 60px;\n    color: white;\n    font-size: 50px;\n    text-align: center;\n    font-weight: 900;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#addTask:hover {\n    bottom: 10px;\n    right: 10px;\n    width: 70px;\n    height: 70px;\n    font-size: 60px;\n    \n}\n\nform#popup {\n    display: none;\n}\n\n#popup.active {\n    position: absolute;\n    top: 20%;\n    right: 20%;\n    left: 20%;\n    \n    /* bottom: 10%; */\n    /* margin-top: 20%; */\n    /* margin-bottom: 20%; */\n    /* margin-right: 25%; */\n    /* margin-left: 25%; */\n    /* left: 0;\n    right: 0;\n    bottom: 0; */\n    background-color: rgba(0, 0, 0, 0.329);\n    color: white;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    /* border-radius: 20px; */\n    /* margin-bottom: 25%; */\n    padding: 15px;\n    border-radius: 20px;\n\n}\n\n#all.disable {\n    filter: blur(10px);\n}\n\n/* .sidebar, .header {\n    background-color: #F0BD8B;\n} */\n\n\n\n\n#all{\n    background: transparent linear-gradient(180deg, #F0BD8B 0%, #132C2E 100%) 0% 0% no-repeat padding-box;\n}\n\n#all {\n    /* background-color: #F0BD8B; */\n}\n\n#content {\n    background-color: #132C2E;\n    /* border-radius: 100px 0px 0px 0px; */\n    padding: 50px;\n    color: white;\n}\n\n#content {\n    border-radius: 40px 0px 0px 0px;\n}\n\n.header {\n    height: 40px;\n}\n\n\n.logo {\n    display: flex;\n    align-items: center;\n    font-size: 40px;\n}\n\n\n#today:hover, #week:hover, #inbox:hover {\n    color: #F9F8F6;\n    opacity: 1;\n    background: #AD876F 0% 0% no-repeat padding-box;\n    /* background-color: #AD876F; */\n    border-radius: 8px;\n/* border-radius: 8px; */\n\n/* Layout Properties */\ntop: 176px;\nleft: 38px;\n/* width: 230px; */\n/* height: 45px; */\n/* UI Properties */\nbackground: #AD876F 0% 0% no-repeat padding-box;\nborder-radius: 8px;\nopacity: 1;\n}\n\n\n.footer {\n    background-color: rgb(0, 0, 0, 0.4);\n    color: white;\n}\n\n#footerIcon {\n    filter: invert(1);\n}\n\n\n\n#inboxIcon {\n    /* Layout Properties */\n/* top: 234px; */\nleft: 48px;\nwidth: 30px;\n/* height: 30px; */\n/* UI Properties */\n/* background: #6C5255 0% 0% no-repeat padding-box; */\nopacity: 1;\n}\n\ndiv#inbox {\n    /* top: 231px; */\n    left: 48px;\n    /* width: 150px; */\n    /* height: 33px; */\n    /* UI Properties */\n    opacity: 1;\n}\n\n\n#weekIcon {\n/* Layout Properties */\ntop: 184px;\nleft: 48px;\nwidth: 30px;\n/* height: 30px; */\n/* UI Properties */\n/* background: #F9F8F6 0% 0% no-repeat padding-box; */\nopacity: 1;\n}\n\n\n#todayIcon {\n    width: 30px;\n}\n\n.top > * {\n    /* padding-top: 10px; */\n    /* padding-bottom: 10px; */\n    /* background-color: red;   */\n    height: 54px;\n    /* margin-top: 5px; */\n    /* margin-bottom: 5px; */\n    padding-left: 5px;\n    padding-right: 5px;\n}\n\ndiv.logo {\n\n    top: 26px;\nleft: 95px;\nwidth: 204px;\nheight: 56px;\ntext-align: left;\nfont: normal normal 600 40px/60px Poppins-SemiBold;\nletter-spacing: 0.17px;\ncolor: #6C5255;\nopacity: 1;\nfont-size: 46px;\n}\n\n.logo {\n    position: inherit;\n    margin-left: 15px;\n    /* : 95px; */\n}\n\n#headerIcon {\n\n    width: 37px;\n    margin-right: 10px;\n}\n\n\n.check {\n    width: 20px;\n    height: 20px;\n    border: 2px solid white;\n    border-radius: 20px;\n}\n\n.task {\n    display: flex;\n    /* justify-content: flex-start; */\n    justify-content: space-between;\n    gap: 60px;\n}\n.left {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n}\n\n.right {\n    display: flex;\n}\n\n\n/* #content > * {\n    display: flex;\n    justify-content: space-around;\n} */\n\n#op1 {\n    border: 2px solid red;\n} \n#op2 {\n    border: 2px solid yellow;\n}\n#op3 {\n    border: 2px solid greenyellow;\n}\n\n/* \n#op1:hover, #op2:hover, #op3:hover {\n    background-color: white;\n    \n} */\n\n#op1:hover {\n    background-color: red;\n    cursor: pointer;\n}\n\n#op2:hover {\n    background-color: yellow;\n    cursor: pointer;\n}\n\n#op3:hover {\n    background-color: greenyellow;\n    cursor: pointer;\n}\n\n\n\n#headerText {\n    font-family: 'font1';\n    /* font-weight: 400; */\n}\n\n#cancelTaskFrom {\n    width: 40px;\n    height: 40px;\n    font-size: 20px;\n    align-self: flex-end;\n    border-radius: 50px;\n    text-align: center;\n}\n\n#inputs {\n    display: flex;\n    flex-direction: column;\n    /* justify-content: space-between; */\n    gap: 20px;\n    align-items: center;\n    /* justify-content: center; */\n}\n\n#submitPopup {\n    align-self: center;\n    width: 50px;\n    height: 40px;\n    margin: 20px;\n}\n\n#inputs > * > input, #inputs > * >  select {\n    /* background-color: red; */\n    height: 30px;\n    width: 200px;\n}\n\n#content > div:first-child {\n    font-size: 50px;\n}\n#content {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n\n#today:hover, #week:hover, #inbox:hover, .project:hover{\n    cursor: pointer;\n}\n\n/* #today:focus, #week:hover, #inbox:hover {\n    background-color: #132C2E;\n} */\n\n\n\n.project:hover {\n    color: #F9F8F6;\n    opacity: 1;\n    background: #AD876F 0% 0% no-repeat padding-box;\n    /* background-color: #AD876F; */\n    /* border-radius: 8px; */\n/* border-radius: 8px; */\n\n/* Layout Properties */\ntop: 176px;\nleft: 38px;\n/* width: 230px; */\n/* height: 45px; */\n/* UI Properties */\nbackground: #AD876F 0% 0% no-repeat padding-box;\n/* border-radius: 8px; */\nopacity: 1;\n}\n\n\n\n/* #lists > * {\n    \n    background: #F0BD8B 0% 0% no-repeat padding-box;\n    margin-left: 15%;\n    margin-right: 15%;\n    margin-top: 10px;\n    margin-bottom: 10px;\n    font-size: 20px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n\n} */\n\n.project {\n    padding: 10px;\n    margin: 5px;\n    text-align: center;\n    font-size: 25px;\n    border-radius: 20px;\n    border: 2px solid brown;\n}\n\n#addProjectInput {\n    background-color: rgb(0, 0, 0, 0.5);\n    width: 90%;\n    margin-left: 3%;\n    /* align-self: center; */\n    margin-top: 15px;\n    height: 20px;\n}\n\n#addProjectBtn {\n    background: #F0BD8B 0% 0% no-repeat padding-box;\n\n    /* margin-top: min(200%, ; */\n    /* margin-bottom: 10px; */\n    /* position: absolute; */\n    /* bottom: 15px; */\n    /* right: 15px; */\n    border-radius: 15px;\n    /* width: 60px; */\n    /* height: 60px; */\n    /* color: white; */\n    font-size: 25px;\n    text-align: center;\n    /* font-weight: 900; */\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 10px;\n    width: 50%;\n    /* margin-left: 43px; */\n    margin-top: 10px;\n}\n\n#addList {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    \n}\n\n.task {\n    /* border: 2px solid black; */\n    font-size: 20px;\n    padding-top: 5px;\n    padding-right: 5px;\n}`,"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,oBAAoB;IACpB,4CAA6B;AACjC;AACA;IACI,oBAAoB;IACpB,4CAA6B;AACjC;AACA;IACI,oBAAoB;IACpB,4CAA6B;AACjC;AACA;IACI,oBAAoB;IACpB,4CAA6B;AACjC;;AAEA;IACI,UAAU;IACV,SAAS;IACT,YAAY;AAChB;AACA;IACI,aAAa;IACb;;;qBAGiB;IACjB,8BAA8B,EAAE,mCAAmC;IACnE,iCAAiC,EAAE,iCAAiC;IACpE,iBAAiB,EAAE,iDAAiD;EACtE;;EAEA;IACE,iBAAiB;IACjB,0BAA0B;EAC5B;;EAEA;IACE,kBAAkB;IAClB,2BAA2B;IAC3B,8BAA8B;IAC9B,aAAa;IACb,sBAAsB;AAC1B;;EAEE;IACE,kBAAkB;IAClB,gCAAgC;IAChC,iCAAiC;AACrC;;EAEE;IACE,iBAAiB;IACjB,0BAA0B;IAC1B,sBAAsB;AAC1B;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,eAAe;;IAEf,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,YAAY;;AAEhB;;;;AAIA;;IAEI,aAAa;IACb,mBAAmB;IACnB,SAAS;IACT,uBAAuB;;AAE3B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;;GAEG;AACH;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;AACA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,wBAAwB;IACxB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;;EAGE,2CAA2C;EAC3C;;;;;;;;;;;IAWE;;AAEJ;IACI,kBAAkB;AACtB;;;;AAIA;IACI,2BAA2B;IAC3B,+CAA+C;;IAE/C,4BAA4B;IAC5B,yBAAyB;IACzB,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,mBAAmB;IACnB,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,gBAAgB;IAChB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,WAAW;IACX,YAAY;IACZ,eAAe;;AAEnB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,UAAU;IACV,SAAS;;IAET,iBAAiB;IACjB,qBAAqB;IACrB,wBAAwB;IACxB,uBAAuB;IACvB,sBAAsB;IACtB;;gBAEY;IACZ,sCAAsC;IACtC,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,8BAA8B;IAC9B,yBAAyB;IACzB,wBAAwB;IACxB,aAAa;IACb,mBAAmB;;AAEvB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;;GAEG;;;;;AAKH;IACI,qGAAqG;AACzG;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,yBAAyB;IACzB,sCAAsC;IACtC,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,YAAY;AAChB;;;AAGA;IACI,aAAa;IACb,mBAAmB;IACnB,eAAe;AACnB;;;AAGA;IACI,cAAc;IACd,UAAU;IACV,+CAA+C;IAC/C,+BAA+B;IAC/B,kBAAkB;AACtB,wBAAwB;;AAExB,sBAAsB;AACtB,UAAU;AACV,UAAU;AACV,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;AAClB,+CAA+C;AAC/C,kBAAkB;AAClB,UAAU;AACV;;;AAGA;IACI,mCAAmC;IACnC,YAAY;AAChB;;AAEA;IACI,iBAAiB;AACrB;;;;AAIA;IACI,sBAAsB;AAC1B,gBAAgB;AAChB,UAAU;AACV,WAAW;AACX,kBAAkB;AAClB,kBAAkB;AAClB,qDAAqD;AACrD,UAAU;AACV;;AAEA;IACI,gBAAgB;IAChB,UAAU;IACV,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;IAClB,UAAU;AACd;;;AAGA;AACA,sBAAsB;AACtB,UAAU;AACV,UAAU;AACV,WAAW;AACX,kBAAkB;AAClB,kBAAkB;AAClB,qDAAqD;AACrD,UAAU;AACV;;;AAGA;IACI,WAAW;AACf;;AAEA;IACI,uBAAuB;IACvB,0BAA0B;IAC1B,6BAA6B;IAC7B,YAAY;IACZ,qBAAqB;IACrB,wBAAwB;IACxB,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;;IAEI,SAAS;AACb,UAAU;AACV,YAAY;AACZ,YAAY;AACZ,gBAAgB;AAChB,kDAAkD;AAClD,sBAAsB;AACtB,cAAc;AACd,UAAU;AACV,eAAe;AACf;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,YAAY;AAChB;;AAEA;;IAEI,WAAW;IACX,kBAAkB;AACtB;;;AAGA;IACI,WAAW;IACX,YAAY;IACZ,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,iCAAiC;IACjC,8BAA8B;IAC9B,SAAS;AACb;AACA;IACI,aAAa;IACb,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,aAAa;AACjB;;;AAGA;;;GAGG;;AAEH;IACI,qBAAqB;AACzB;AACA;IACI,wBAAwB;AAC5B;AACA;IACI,6BAA6B;AACjC;;AAEA;;;;GAIG;;AAEH;IACI,qBAAqB;IACrB,eAAe;AACnB;;AAEA;IACI,wBAAwB;IACxB,eAAe;AACnB;;AAEA;IACI,6BAA6B;IAC7B,eAAe;AACnB;;;;AAIA;IACI,oBAAoB;IACpB,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,eAAe;IACf,oBAAoB;IACpB,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,oCAAoC;IACpC,SAAS;IACT,mBAAmB;IACnB,6BAA6B;AACjC;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,2BAA2B;IAC3B,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,eAAe;AACnB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;;AAGA;IACI,eAAe;AACnB;;AAEA;;GAEG;;;;AAIH;IACI,cAAc;IACd,UAAU;IACV,+CAA+C;IAC/C,+BAA+B;IAC/B,wBAAwB;AAC5B,wBAAwB;;AAExB,sBAAsB;AACtB,UAAU;AACV,UAAU;AACV,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;AAClB,+CAA+C;AAC/C,wBAAwB;AACxB,UAAU;AACV;;;;AAIA;;;;;;;;;;;GAWG;;AAEH;IACI,aAAa;IACb,WAAW;IACX,kBAAkB;IAClB,eAAe;IACf,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,mCAAmC;IACnC,UAAU;IACV,eAAe;IACf,wBAAwB;IACxB,gBAAgB;IAChB,YAAY;AAChB;;AAEA;IACI,+CAA+C;;IAE/C,4BAA4B;IAC5B,yBAAyB;IACzB,wBAAwB;IACxB,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,iBAAiB;IACjB,kBAAkB;IAClB,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,sBAAsB;IACtB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,aAAa;IACb,UAAU;IACV,uBAAuB;IACvB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;;AAEvB;;AAEA;IACI,6BAA6B;IAC7B,eAAe;IACf,gBAAgB;IAChB,kBAAkB;AACtB",sourcesContent:['@font-face {\r\n    font-family: "font1";\r\n    src: url("./fonts/font1.ttf");\r\n}\r\n@font-face {\r\n    font-family: "font2";\r\n    src: url("./fonts/font2.ttf");\r\n}\r\n@font-face {\r\n    font-family: "font3";\r\n    src: url("./fonts/font3.ttf");\r\n}\r\n@font-face {\r\n    font-family: "font4";\r\n    src: url("./fonts/font4.ttf");\r\n}\r\n\r\nbody, html {\r\n    padding: 0;\r\n    margin: 0;\r\n    height: 100%;\r\n}\r\n#all {\r\n    display: grid;\r\n    grid-template-areas:\r\n      "header header"\r\n      "sidebar content"\r\n      "footer footer";\r\n    grid-template-columns: 1fr 5fr; /* Adjust column widths as needed */\r\n    grid-template-rows: auto 1fr auto; /* Adjust row heights as needed */\r\n    min-height: 100vh; /* Ensures the layout fills the entire viewport */\r\n  }\r\n  \r\n  .header {\r\n    grid-area: header;\r\n    /* Styles for the header */\r\n  }\r\n  \r\n  .sidebar {\r\n    grid-area: sidebar;\r\n    /* Styles for the sidebar */\r\n    /* background-color: orange; */\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n  \r\n  .content {\r\n    grid-area: content;\r\n    /* Styles for the main content */\r\n    /* background-color: cadetblue; */\r\n}\r\n  \r\n  .footer {\r\n    grid-area: footer;\r\n    /* Styles for the footer */\r\n    background-color: gray;\r\n}\r\n\r\n#footerIcon {\r\n    width: 40px;\r\n}  \r\n\r\n.header {\r\n    display: flex;\r\n    font-size: 60px;\r\n\r\n    align-items: center;\r\n    gap: 25px;\r\n}\r\n\r\n#headerIcon {\r\n    width: 100px;\r\n\r\n}\r\n\r\n\r\n\r\n.footer {\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 15px;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n.sidebar > div.top {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n    font-size: large;\r\n}\r\n\r\n/* #text {\r\n    margin-left: 20%;\r\n} */\r\n.lists > div.title {\r\n    font-size: 40px;\r\n}\r\n\r\n#inbox, #today, #week {\r\n    margin-left: 5%;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n#todayIcon, #weekIcon, #inboxIcon {\r\n    width: 40px;\r\n}\r\n\r\n.top {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    margin-bottom: 30px;\r\n    margin-top: 10px;\r\n}\r\n\r\n.bottom {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\ninput {\r\n    /* text-align: center; */\r\n    border-radius: 5px;\r\n    height: 25px;\r\n}\r\n\r\nbutton {\r\n    height: 30px;\r\n    border-radius: 5px;\r\n}\r\n\r\n#content {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n\r\n  /* Media query for responsive adjustments */\r\n  /* @media screen and (max-width: 768px) {\r\n    .grid-container {\r\n      grid-template-areas:\r\n        "header"\r\n        "content"\r\n        "sidebar"\r\n        "footer";\r\n      grid-template-columns: 1fr; \r\n      grid-template-rows: auto 1fr auto auto; \r\n    }\r\n  }\r\n   */\r\n\r\n.content {\r\n    position: relative;\r\n}\r\n\r\n\r\n\r\n#addTask {\r\n    /* background-color: red; */\r\n    background: #F0BD8B 0% 0% no-repeat padding-box;\r\n\r\n    /* margin-top: min(200%, ; */\r\n    /* margin-bottom: 10px; */\r\n    position: absolute;\r\n    bottom: 15px;\r\n    right: 15px;\r\n    border-radius: 50px;\r\n    width: 60px;\r\n    height: 60px;\r\n    color: white;\r\n    font-size: 50px;\r\n    text-align: center;\r\n    font-weight: 900;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n#addTask:hover {\r\n    bottom: 10px;\r\n    right: 10px;\r\n    width: 70px;\r\n    height: 70px;\r\n    font-size: 60px;\r\n    \r\n}\r\n\r\nform#popup {\r\n    display: none;\r\n}\r\n\r\n#popup.active {\r\n    position: absolute;\r\n    top: 20%;\r\n    right: 20%;\r\n    left: 20%;\r\n    \r\n    /* bottom: 10%; */\r\n    /* margin-top: 20%; */\r\n    /* margin-bottom: 20%; */\r\n    /* margin-right: 25%; */\r\n    /* margin-left: 25%; */\r\n    /* left: 0;\r\n    right: 0;\r\n    bottom: 0; */\r\n    background-color: rgba(0, 0, 0, 0.329);\r\n    color: white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    /* border-radius: 20px; */\r\n    /* margin-bottom: 25%; */\r\n    padding: 15px;\r\n    border-radius: 20px;\r\n\r\n}\r\n\r\n#all.disable {\r\n    filter: blur(10px);\r\n}\r\n\r\n/* .sidebar, .header {\r\n    background-color: #F0BD8B;\r\n} */\r\n\r\n\r\n\r\n\r\n#all{\r\n    background: transparent linear-gradient(180deg, #F0BD8B 0%, #132C2E 100%) 0% 0% no-repeat padding-box;\r\n}\r\n\r\n#all {\r\n    /* background-color: #F0BD8B; */\r\n}\r\n\r\n#content {\r\n    background-color: #132C2E;\r\n    /* border-radius: 100px 0px 0px 0px; */\r\n    padding: 50px;\r\n    color: white;\r\n}\r\n\r\n#content {\r\n    border-radius: 40px 0px 0px 0px;\r\n}\r\n\r\n.header {\r\n    height: 40px;\r\n}\r\n\r\n\r\n.logo {\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 40px;\r\n}\r\n\r\n\r\n#today:hover, #week:hover, #inbox:hover {\r\n    color: #F9F8F6;\r\n    opacity: 1;\r\n    background: #AD876F 0% 0% no-repeat padding-box;\r\n    /* background-color: #AD876F; */\r\n    border-radius: 8px;\r\n/* border-radius: 8px; */\r\n\r\n/* Layout Properties */\r\ntop: 176px;\r\nleft: 38px;\r\n/* width: 230px; */\r\n/* height: 45px; */\r\n/* UI Properties */\r\nbackground: #AD876F 0% 0% no-repeat padding-box;\r\nborder-radius: 8px;\r\nopacity: 1;\r\n}\r\n\r\n\r\n.footer {\r\n    background-color: rgb(0, 0, 0, 0.4);\r\n    color: white;\r\n}\r\n\r\n#footerIcon {\r\n    filter: invert(1);\r\n}\r\n\r\n\r\n\r\n#inboxIcon {\r\n    /* Layout Properties */\r\n/* top: 234px; */\r\nleft: 48px;\r\nwidth: 30px;\r\n/* height: 30px; */\r\n/* UI Properties */\r\n/* background: #6C5255 0% 0% no-repeat padding-box; */\r\nopacity: 1;\r\n}\r\n\r\ndiv#inbox {\r\n    /* top: 231px; */\r\n    left: 48px;\r\n    /* width: 150px; */\r\n    /* height: 33px; */\r\n    /* UI Properties */\r\n    opacity: 1;\r\n}\r\n\r\n\r\n#weekIcon {\r\n/* Layout Properties */\r\ntop: 184px;\r\nleft: 48px;\r\nwidth: 30px;\r\n/* height: 30px; */\r\n/* UI Properties */\r\n/* background: #F9F8F6 0% 0% no-repeat padding-box; */\r\nopacity: 1;\r\n}\r\n\r\n\r\n#todayIcon {\r\n    width: 30px;\r\n}\r\n\r\n.top > * {\r\n    /* padding-top: 10px; */\r\n    /* padding-bottom: 10px; */\r\n    /* background-color: red;   */\r\n    height: 54px;\r\n    /* margin-top: 5px; */\r\n    /* margin-bottom: 5px; */\r\n    padding-left: 5px;\r\n    padding-right: 5px;\r\n}\r\n\r\ndiv.logo {\r\n\r\n    top: 26px;\r\nleft: 95px;\r\nwidth: 204px;\r\nheight: 56px;\r\ntext-align: left;\r\nfont: normal normal 600 40px/60px Poppins-SemiBold;\r\nletter-spacing: 0.17px;\r\ncolor: #6C5255;\r\nopacity: 1;\r\nfont-size: 46px;\r\n}\r\n\r\n.logo {\r\n    position: inherit;\r\n    margin-left: 15px;\r\n    /* : 95px; */\r\n}\r\n\r\n#headerIcon {\r\n\r\n    width: 37px;\r\n    margin-right: 10px;\r\n}\r\n\r\n\r\n.check {\r\n    width: 20px;\r\n    height: 20px;\r\n    border: 2px solid white;\r\n    border-radius: 20px;\r\n}\r\n\r\n.task {\r\n    display: flex;\r\n    /* justify-content: flex-start; */\r\n    justify-content: space-between;\r\n    gap: 60px;\r\n}\r\n.left {\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: center;\r\n}\r\n\r\n.right {\r\n    display: flex;\r\n}\r\n\r\n\r\n/* #content > * {\r\n    display: flex;\r\n    justify-content: space-around;\r\n} */\r\n\r\n#op1 {\r\n    border: 2px solid red;\r\n} \r\n#op2 {\r\n    border: 2px solid yellow;\r\n}\r\n#op3 {\r\n    border: 2px solid greenyellow;\r\n}\r\n\r\n/* \r\n#op1:hover, #op2:hover, #op3:hover {\r\n    background-color: white;\r\n    \r\n} */\r\n\r\n#op1:hover {\r\n    background-color: red;\r\n    cursor: pointer;\r\n}\r\n\r\n#op2:hover {\r\n    background-color: yellow;\r\n    cursor: pointer;\r\n}\r\n\r\n#op3:hover {\r\n    background-color: greenyellow;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n\r\n#headerText {\r\n    font-family: \'font1\';\r\n    /* font-weight: 400; */\r\n}\r\n\r\n#cancelTaskFrom {\r\n    width: 40px;\r\n    height: 40px;\r\n    font-size: 20px;\r\n    align-self: flex-end;\r\n    border-radius: 50px;\r\n    text-align: center;\r\n}\r\n\r\n#inputs {\r\n    display: flex;\r\n    flex-direction: column;\r\n    /* justify-content: space-between; */\r\n    gap: 20px;\r\n    align-items: center;\r\n    /* justify-content: center; */\r\n}\r\n\r\n#submitPopup {\r\n    align-self: center;\r\n    width: 50px;\r\n    height: 40px;\r\n    margin: 20px;\r\n}\r\n\r\n#inputs > * > input, #inputs > * >  select {\r\n    /* background-color: red; */\r\n    height: 30px;\r\n    width: 200px;\r\n}\r\n\r\n#content > div:first-child {\r\n    font-size: 50px;\r\n}\r\n#content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n}\r\n\r\n\r\n#today:hover, #week:hover, #inbox:hover, .project:hover{\r\n    cursor: pointer;\r\n}\r\n\r\n/* #today:focus, #week:hover, #inbox:hover {\r\n    background-color: #132C2E;\r\n} */\r\n\r\n\r\n\r\n.project:hover {\r\n    color: #F9F8F6;\r\n    opacity: 1;\r\n    background: #AD876F 0% 0% no-repeat padding-box;\r\n    /* background-color: #AD876F; */\r\n    /* border-radius: 8px; */\r\n/* border-radius: 8px; */\r\n\r\n/* Layout Properties */\r\ntop: 176px;\r\nleft: 38px;\r\n/* width: 230px; */\r\n/* height: 45px; */\r\n/* UI Properties */\r\nbackground: #AD876F 0% 0% no-repeat padding-box;\r\n/* border-radius: 8px; */\r\nopacity: 1;\r\n}\r\n\r\n\r\n\r\n/* #lists > * {\r\n    \r\n    background: #F0BD8B 0% 0% no-repeat padding-box;\r\n    margin-left: 15%;\r\n    margin-right: 15%;\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    font-size: 20px;\r\n    padding-top: 10px;\r\n    padding-bottom: 10px;\r\n\r\n} */\r\n\r\n.project {\r\n    padding: 10px;\r\n    margin: 5px;\r\n    text-align: center;\r\n    font-size: 25px;\r\n    border-radius: 20px;\r\n    border: 2px solid brown;\r\n}\r\n\r\n#addProjectInput {\r\n    background-color: rgb(0, 0, 0, 0.5);\r\n    width: 90%;\r\n    margin-left: 3%;\r\n    /* align-self: center; */\r\n    margin-top: 15px;\r\n    height: 20px;\r\n}\r\n\r\n#addProjectBtn {\r\n    background: #F0BD8B 0% 0% no-repeat padding-box;\r\n\r\n    /* margin-top: min(200%, ; */\r\n    /* margin-bottom: 10px; */\r\n    /* position: absolute; */\r\n    /* bottom: 15px; */\r\n    /* right: 15px; */\r\n    border-radius: 15px;\r\n    /* width: 60px; */\r\n    /* height: 60px; */\r\n    /* color: white; */\r\n    font-size: 25px;\r\n    text-align: center;\r\n    /* font-weight: 900; */\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 10px;\r\n    width: 50%;\r\n    /* margin-left: 43px; */\r\n    margin-top: 10px;\r\n}\r\n\r\n#addList {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    \r\n}\r\n\r\n.task {\r\n    /* border: 2px solid black; */\r\n    font-size: 20px;\r\n    padding-top: 5px;\r\n    padding-right: 5px;\r\n}'],sourceRoot:""}]);const m=h},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var u=0;u<this.length;u++){var s=this[u][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),n.push(c))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},105:(e,n,t)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function a(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function o(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function i(e){o(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===r(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function u(e,n){o(2,arguments);var t=i(e),r=a(n);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}function s(e,n){o(2,arguments);var t=i(e),r=a(n);if(isNaN(r))return new Date(NaN);if(!r)return t;var u=t.getDate(),s=new Date(t.getTime());return s.setMonth(t.getMonth()+r+1,0),u>=s.getDate()?s:(t.setFullYear(s.getFullYear(),s.getMonth(),u),t)}function l(e,n){if(o(2,arguments),!n||"object"!==r(n))return new Date(NaN);var t=n.years?a(n.years):0,l=n.months?a(n.months):0,c=n.weeks?a(n.weeks):0,d=n.days?a(n.days):0,f=n.hours?a(n.hours):0,h=n.minutes?a(n.minutes):0,A=n.seconds?a(n.seconds):0,v=i(e),g=l||t?s(v,l+12*t):v,p=d||c?u(g,d+7*c):g,m=1e3*(A+60*(h+60*f));return new Date(p.getTime()+m)}function c(e){o(1,arguments);var n=i(e).getDay();return 0===n||6===n}function d(e){return o(1,arguments),0===i(e).getDay()}function f(e){return o(1,arguments),6===i(e).getDay()}function h(e,n){o(2,arguments);var t=i(e),r=c(t),u=a(n);if(isNaN(u))return new Date(NaN);var s=t.getHours(),l=u<0?-1:1,h=a(u/5);t.setDate(t.getDate()+7*h);for(var A=Math.abs(u%5);A>0;)t.setDate(t.getDate()+l),c(t)||(A-=1);return r&&c(t)&&0!==u&&(f(t)&&t.setDate(t.getDate()+(l<0?2:-1)),d(t)&&t.setDate(t.getDate()+(l<0?1:-2))),t.setHours(s),t}function A(e,n){o(2,arguments);var t=i(e).getTime(),r=a(n);return new Date(t+r)}t.r(n),t.d(n,{add:()=>l,addBusinessDays:()=>h,addDays:()=>u,addHours:()=>g,addISOWeekYears:()=>M,addMilliseconds:()=>A,addMinutes:()=>S,addMonths:()=>s,addQuarters:()=>Y,addSeconds:()=>N,addWeeks:()=>U,addYears:()=>O,areIntervalsOverlapping:()=>F,clamp:()=>P,closestIndexTo:()=>j,closestTo:()=>L,compareAsc:()=>R,compareDesc:()=>q,daysInWeek:()=>z,daysInYear:()=>Q,daysToWeeks:()=>se,differenceInBusinessDays:()=>fe,differenceInCalendarDays:()=>T,differenceInCalendarISOWeekYears:()=>he,differenceInCalendarISOWeeks:()=>ve,differenceInCalendarMonths:()=>ge,differenceInCalendarQuarters:()=>me,differenceInCalendarWeeks:()=>ye,differenceInCalendarYears:()=>be,differenceInDays:()=>xe,differenceInHours:()=>De,differenceInISOWeekYears:()=>Ee,differenceInMilliseconds:()=>Be,differenceInMinutes:()=>Se,differenceInMonths:()=>Oe,differenceInQuarters:()=>Fe,differenceInSeconds:()=>He,differenceInWeeks:()=>We,differenceInYears:()=>Pe,eachDayOfInterval:()=>je,eachHourOfInterval:()=>Le,eachMinuteOfInterval:()=>qe,eachMonthOfInterval:()=>ze,eachQuarterOfInterval:()=>Ge,eachWeekOfInterval:()=>Xe,eachWeekendOfInterval:()=>Ze,eachWeekendOfMonth:()=>$e,eachWeekendOfYear:()=>Ke,eachYearOfInterval:()=>en,endOfDay:()=>Ye,endOfDecade:()=>nn,endOfHour:()=>tn,endOfISOWeek:()=>an,endOfISOWeekYear:()=>on,endOfMinute:()=>un,endOfMonth:()=>Ne,endOfQuarter:()=>sn,endOfSecond:()=>ln,endOfToday:()=>cn,endOfTomorrow:()=>dn,endOfWeek:()=>rn,endOfYear:()=>_e,endOfYesterday:()=>fn,format:()=>Vn,formatDistance:()=>tt,formatDistanceStrict:()=>ut,formatDistanceToNow:()=>st,formatDistanceToNowStrict:()=>lt,formatDuration:()=>dt,formatISO:()=>ft,formatISO9075:()=>ht,formatISODuration:()=>At,formatRFC3339:()=>vt,formatRFC7231:()=>mt,formatRelative:()=>wt,fromUnixTime:()=>yt,getDate:()=>bt,getDay:()=>Ct,getDayOfYear:()=>xt,getDaysInMonth:()=>Bt,getDaysInYear:()=>kt,getDecade:()=>Tt,getDefaultOptions:()=>Dt,getHours:()=>Mt,getISODay:()=>Et,getISOWeek:()=>Yt,getISOWeekYear:()=>C,getISOWeeksInYear:()=>Ut,getMilliseconds:()=>Ot,getMinutes:()=>Ft,getMonth:()=>Ht,getOverlappingDaysInIntervals:()=>Pt,getQuarter:()=>pe,getSeconds:()=>jt,getTime:()=>Lt,getUnixTime:()=>Rt,getWeek:()=>Gt,getWeekOfMonth:()=>Xt,getWeekYear:()=>qt,getWeeksInMonth:()=>Vt,getYear:()=>$t,hoursToMilliseconds:()=>_t,hoursToMinutes:()=>Jt,hoursToSeconds:()=>Kt,intervalToDuration:()=>er,intlFormat:()=>nr,intlFormatDistance:()=>tr,isAfter:()=>rr,isBefore:()=>ar,isDate:()=>ce,isEqual:()=>or,isExists:()=>ir,isFirstDayOfMonth:()=>ur,isFriday:()=>sr,isFuture:()=>lr,isLastDayOfMonth:()=>Ue,isLeapYear:()=>It,isMatch:()=>Xa,isMonday:()=>Za,isPast:()=>Va,isSameDay:()=>le,isSameHour:()=>_a,isSameISOWeek:()=>Ka,isSameISOWeekYear:()=>eo,isSameMinute:()=>no,isSameMonth:()=>to,isSameQuarter:()=>ro,isSameSecond:()=>oo,isSameWeek:()=>Ja,isSameYear:()=>io,isSaturday:()=>f,isSunday:()=>d,isThisHour:()=>uo,isThisISOWeek:()=>so,isThisMinute:()=>lo,isThisMonth:()=>co,isThisQuarter:()=>fo,isThisSecond:()=>ho,isThisWeek:()=>Ao,isThisYear:()=>vo,isThursday:()=>go,isToday:()=>po,isTomorrow:()=>mo,isTuesday:()=>wo,isValid:()=>de,isWednesday:()=>yo,isWeekend:()=>c,isWithinInterval:()=>bo,isYesterday:()=>xo,lastDayOfDecade:()=>Bo,lastDayOfISOWeek:()=>ko,lastDayOfISOWeekYear:()=>To,lastDayOfMonth:()=>Zt,lastDayOfQuarter:()=>Do,lastDayOfWeek:()=>Io,lastDayOfYear:()=>Mo,lightFormat:()=>Uo,max:()=>H,maxTime:()=>G,milliseconds:()=>Fo,millisecondsInHour:()=>Z,millisecondsInMinute:()=>X,millisecondsInSecond:()=>V,millisecondsToHours:()=>Ho,millisecondsToMinutes:()=>Wo,millisecondsToSeconds:()=>Po,min:()=>W,minTime:()=>$,minutesInHour:()=>_,minutesToHours:()=>jo,minutesToMilliseconds:()=>Lo,minutesToSeconds:()=>Ro,monthsInQuarter:()=>J,monthsInYear:()=>K,monthsToQuarters:()=>qo,monthsToYears:()=>zo,nextDay:()=>Qo,nextFriday:()=>Go,nextMonday:()=>Xo,nextSaturday:()=>Zo,nextSunday:()=>Vo,nextThursday:()=>$o,nextTuesday:()=>_o,nextWednesday:()=>Jo,parse:()=>Ga,parseISO:()=>Ko,parseJSON:()=>si,previousDay:()=>li,previousFriday:()=>ci,previousMonday:()=>di,previousSaturday:()=>fi,previousSunday:()=>hi,previousThursday:()=>Ai,previousTuesday:()=>vi,previousWednesday:()=>gi,quartersInYear:()=>ee,quartersToMonths:()=>pi,quartersToYears:()=>mi,roundToNearestMinutes:()=>wi,secondsInDay:()=>re,secondsInHour:()=>ne,secondsInMinute:()=>te,secondsInMonth:()=>ie,secondsInQuarter:()=>ue,secondsInWeek:()=>ae,secondsInYear:()=>oe,secondsToHours:()=>yi,secondsToMilliseconds:()=>bi,secondsToMinutes:()=>Ci,set:()=>Bi,setDate:()=>Ii,setDay:()=>ki,setDayOfYear:()=>Ti,setDefaultOptions:()=>Di,setHours:()=>Mi,setISODay:()=>Ei,setISOWeek:()=>Si,setISOWeekYear:()=>D,setMilliseconds:()=>Yi,setMinutes:()=>Ni,setMonth:()=>xi,setQuarter:()=>Ui,setSeconds:()=>Oi,setWeek:()=>Fi,setWeekYear:()=>Hi,setYear:()=>Wi,startOfDay:()=>I,startOfDecade:()=>Pi,startOfHour:()=>$a,startOfISOWeek:()=>b,startOfISOWeekYear:()=>x,startOfMinute:()=>Re,startOfMonth:()=>Ve,startOfQuarter:()=>Qe,startOfSecond:()=>ao,startOfToday:()=>ji,startOfTomorrow:()=>Li,startOfWeek:()=>y,startOfWeekYear:()=>zt,startOfYear:()=>Je,startOfYesterday:()=>Ri,sub:()=>zi,subBusinessDays:()=>Qi,subDays:()=>Co,subHours:()=>Gi,subISOWeekYears:()=>Me,subMilliseconds:()=>hn,subMinutes:()=>Xi,subMonths:()=>qi,subQuarters:()=>Zi,subSeconds:()=>Vi,subWeeks:()=>$i,subYears:()=>_i,toDate:()=>i,weeksToDays:()=>Ji,yearsToMonths:()=>Ki,yearsToQuarters:()=>eu});var v=36e5;function g(e,n){return o(2,arguments),A(e,a(n)*v)}var p={};function m(){return p}function w(e){p=e}function y(e,n){var t,r,u,s,l,c,d,f;o(1,arguments);var h=m(),A=a(null!==(t=null!==(r=null!==(u=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(l=n.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==u?u:h.weekStartsOn)&&void 0!==r?r:null===(d=h.locale)||void 0===d||null===(f=d.options)||void 0===f?void 0:f.weekStartsOn)&&void 0!==t?t:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=i(e),g=v.getDay(),p=(g<A?7:0)+g-A;return v.setDate(v.getDate()-p),v.setHours(0,0,0,0),v}function b(e){return o(1,arguments),y(e,{weekStartsOn:1})}function C(e){o(1,arguments);var n=i(e),t=n.getFullYear(),r=new Date(0);r.setFullYear(t+1,0,4),r.setHours(0,0,0,0);var a=b(r),u=new Date(0);u.setFullYear(t,0,4),u.setHours(0,0,0,0);var s=b(u);return n.getTime()>=a.getTime()?t+1:n.getTime()>=s.getTime()?t:t-1}function x(e){o(1,arguments);var n=C(e),t=new Date(0);return t.setFullYear(n,0,4),t.setHours(0,0,0,0),b(t)}function B(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}function I(e){o(1,arguments);var n=i(e);return n.setHours(0,0,0,0),n}var k=864e5;function T(e,n){o(2,arguments);var t=I(e),r=I(n),a=t.getTime()-B(t),i=r.getTime()-B(r);return Math.round((a-i)/k)}function D(e,n){o(2,arguments);var t=i(e),r=a(n),u=T(t,x(t)),s=new Date(0);return s.setFullYear(r,0,4),s.setHours(0,0,0,0),(t=x(s)).setDate(t.getDate()+u),t}function M(e,n){o(2,arguments);var t=a(n);return D(e,C(e)+t)}var E=6e4;function S(e,n){return o(2,arguments),A(e,a(n)*E)}function Y(e,n){return o(2,arguments),s(e,3*a(n))}function N(e,n){return o(2,arguments),A(e,1e3*a(n))}function U(e,n){return o(2,arguments),u(e,7*a(n))}function O(e,n){return o(2,arguments),s(e,12*a(n))}function F(e,n,t){o(2,arguments);var r=i(null==e?void 0:e.start).getTime(),a=i(null==e?void 0:e.end).getTime(),u=i(null==n?void 0:n.start).getTime(),s=i(null==n?void 0:n.end).getTime();if(!(r<=a&&u<=s))throw new RangeError("Invalid interval");return null!=t&&t.inclusive?r<=s&&u<=a:r<s&&u<a}function H(e){var n,t;if(o(1,arguments),e&&"function"==typeof e.forEach)n=e;else{if("object"!==r(e)||null===e)return new Date(NaN);n=Array.prototype.slice.call(e)}return n.forEach((function(e){var n=i(e);(void 0===t||t<n||isNaN(Number(n)))&&(t=n)})),t||new Date(NaN)}function W(e){var n,t;if(o(1,arguments),e&&"function"==typeof e.forEach)n=e;else{if("object"!==r(e)||null===e)return new Date(NaN);n=Array.prototype.slice.call(e)}return n.forEach((function(e){var n=i(e);(void 0===t||t>n||isNaN(n.getDate()))&&(t=n)})),t||new Date(NaN)}function P(e,n){var t=n.start,r=n.end;return o(2,arguments),W([H([e,t]),r])}function j(e,n){o(2,arguments);var t=i(e);if(isNaN(Number(t)))return NaN;var r,a,u=t.getTime();return(null==n?[]:"function"==typeof n.forEach?n:Array.prototype.slice.call(n)).forEach((function(e,n){var t=i(e);if(isNaN(Number(t)))return r=NaN,void(a=NaN);var o=Math.abs(u-t.getTime());(null==r||o<Number(a))&&(r=n,a=o)})),r}function L(e,n){o(2,arguments);var t=i(e);if(isNaN(Number(t)))return new Date(NaN);var r,a,u=t.getTime();return(null==n?[]:"function"==typeof n.forEach?n:Array.prototype.slice.call(n)).forEach((function(e){var n=i(e);if(isNaN(Number(n)))return r=new Date(NaN),void(a=NaN);var t=Math.abs(u-n.getTime());(null==r||t<Number(a))&&(r=n,a=t)})),r}function R(e,n){o(2,arguments);var t=i(e),r=i(n),a=t.getTime()-r.getTime();return a<0?-1:a>0?1:a}function q(e,n){o(2,arguments);var t=i(e),r=i(n),a=t.getTime()-r.getTime();return a>0?-1:a<0?1:a}var z=7,Q=365.2425,G=24*Math.pow(10,8)*60*60*1e3,X=6e4,Z=36e5,V=1e3,$=-G,_=60,J=3,K=12,ee=4,ne=3600,te=60,re=24*ne,ae=7*re,oe=re*Q,ie=oe/12,ue=3*ie;function se(e){o(1,arguments);var n=e/z;return Math.floor(n)}function le(e,n){o(2,arguments);var t=I(e),r=I(n);return t.getTime()===r.getTime()}function ce(e){return o(1,arguments),e instanceof Date||"object"===r(e)&&"[object Date]"===Object.prototype.toString.call(e)}function de(e){if(o(1,arguments),!ce(e)&&"number"!=typeof e)return!1;var n=i(e);return!isNaN(Number(n))}function fe(e,n){o(2,arguments);var t=i(e),r=i(n);if(!de(t)||!de(r))return NaN;var s=T(t,r),l=s<0?-1:1,d=a(s/7),f=5*d;for(r=u(r,7*d);!le(t,r);)f+=c(r)?0:l,r=u(r,l);return 0===f?0:f}function he(e,n){return o(2,arguments),C(e)-C(n)}var Ae=6048e5;function ve(e,n){o(2,arguments);var t=b(e),r=b(n),a=t.getTime()-B(t),i=r.getTime()-B(r);return Math.round((a-i)/Ae)}function ge(e,n){o(2,arguments);var t=i(e),r=i(n);return 12*(t.getFullYear()-r.getFullYear())+(t.getMonth()-r.getMonth())}function pe(e){o(1,arguments);var n=i(e);return Math.floor(n.getMonth()/3)+1}function me(e,n){o(2,arguments);var t=i(e),r=i(n);return 4*(t.getFullYear()-r.getFullYear())+(pe(t)-pe(r))}var we=6048e5;function ye(e,n,t){o(2,arguments);var r=y(e,t),a=y(n,t),i=r.getTime()-B(r),u=a.getTime()-B(a);return Math.round((i-u)/we)}function be(e,n){o(2,arguments);var t=i(e),r=i(n);return t.getFullYear()-r.getFullYear()}function Ce(e,n){var t=e.getFullYear()-n.getFullYear()||e.getMonth()-n.getMonth()||e.getDate()-n.getDate()||e.getHours()-n.getHours()||e.getMinutes()-n.getMinutes()||e.getSeconds()-n.getSeconds()||e.getMilliseconds()-n.getMilliseconds();return t<0?-1:t>0?1:t}function xe(e,n){o(2,arguments);var t=i(e),r=i(n),a=Ce(t,r),u=Math.abs(T(t,r));t.setDate(t.getDate()-a*u);var s=a*(u-Number(Ce(t,r)===-a));return 0===s?0:s}function Be(e,n){return o(2,arguments),i(e).getTime()-i(n).getTime()}var Ie={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}},ke="trunc";function Te(e){return e?Ie[e]:Ie[ke]}function De(e,n,t){o(2,arguments);var r=Be(e,n)/Z;return Te(null==t?void 0:t.roundingMethod)(r)}function Me(e,n){return o(2,arguments),M(e,-a(n))}function Ee(e,n){o(2,arguments);var t=i(e),r=i(n),a=R(t,r),u=Math.abs(he(t,r));t=Me(t,a*u);var s=a*(u-Number(R(t,r)===-a));return 0===s?0:s}function Se(e,n,t){o(2,arguments);var r=Be(e,n)/X;return Te(null==t?void 0:t.roundingMethod)(r)}function Ye(e){o(1,arguments);var n=i(e);return n.setHours(23,59,59,999),n}function Ne(e){o(1,arguments);var n=i(e),t=n.getMonth();return n.setFullYear(n.getFullYear(),t+1,0),n.setHours(23,59,59,999),n}function Ue(e){o(1,arguments);var n=i(e);return Ye(n).getTime()===Ne(n).getTime()}function Oe(e,n){o(2,arguments);var t,r=i(e),a=i(n),u=R(r,a),s=Math.abs(ge(r,a));if(s<1)t=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-u*s);var l=R(r,a)===-u;Ue(i(e))&&1===s&&1===R(e,a)&&(l=!1),t=u*(s-Number(l))}return 0===t?0:t}function Fe(e,n,t){o(2,arguments);var r=Oe(e,n)/3;return Te(null==t?void 0:t.roundingMethod)(r)}function He(e,n,t){o(2,arguments);var r=Be(e,n)/1e3;return Te(null==t?void 0:t.roundingMethod)(r)}function We(e,n,t){o(2,arguments);var r=xe(e,n)/7;return Te(null==t?void 0:t.roundingMethod)(r)}function Pe(e,n){o(2,arguments);var t=i(e),r=i(n),a=R(t,r),u=Math.abs(be(t,r));t.setFullYear(1584),r.setFullYear(1584);var s=R(t,r)===-a,l=a*(u-Number(s));return 0===l?0:l}function je(e,n){var t;o(1,arguments);var r=e||{},a=i(r.start),u=i(r.end).getTime();if(!(a.getTime()<=u))throw new RangeError("Invalid interval");var s=[],l=a;l.setHours(0,0,0,0);var c=Number(null!==(t=null==n?void 0:n.step)&&void 0!==t?t:1);if(c<1||isNaN(c))throw new RangeError("`options.step` must be a number greater than 1");for(;l.getTime()<=u;)s.push(i(l)),l.setDate(l.getDate()+c),l.setHours(0,0,0,0);return s}function Le(e,n){var t;o(1,arguments);var r=e||{},a=i(r.start),u=i(r.end),s=a.getTime(),l=u.getTime();if(!(s<=l))throw new RangeError("Invalid interval");var c=[],d=a;d.setMinutes(0,0,0);var f=Number(null!==(t=null==n?void 0:n.step)&&void 0!==t?t:1);if(f<1||isNaN(f))throw new RangeError("`options.step` must be a number greater than 1");for(;d.getTime()<=l;)c.push(i(d)),d=g(d,f);return c}function Re(e){o(1,arguments);var n=i(e);return n.setSeconds(0,0),n}function qe(e,n){var t;o(1,arguments);var r=Re(i(e.start)),a=i(e.end),u=r.getTime(),s=a.getTime();if(u>=s)throw new RangeError("Invalid interval");var l=[],c=r,d=Number(null!==(t=null==n?void 0:n.step)&&void 0!==t?t:1);if(d<1||isNaN(d))throw new RangeError("`options.step` must be a number equal to or greater than 1");for(;c.getTime()<=s;)l.push(i(c)),c=S(c,d);return l}function ze(e){o(1,arguments);var n=e||{},t=i(n.start),r=i(n.end).getTime(),a=[];if(!(t.getTime()<=r))throw new RangeError("Invalid interval");var u=t;for(u.setHours(0,0,0,0),u.setDate(1);u.getTime()<=r;)a.push(i(u)),u.setMonth(u.getMonth()+1);return a}function Qe(e){o(1,arguments);var n=i(e),t=n.getMonth(),r=t-t%3;return n.setMonth(r,1),n.setHours(0,0,0,0),n}function Ge(e){o(1,arguments);var n=e||{},t=i(n.start),r=i(n.end),a=r.getTime();if(!(t.getTime()<=a))throw new RangeError("Invalid interval");var u=Qe(t);a=Qe(r).getTime();for(var s=[],l=u;l.getTime()<=a;)s.push(i(l)),l=Y(l,1);return s}function Xe(e,n){o(1,arguments);var t=e||{},r=i(t.start),a=i(t.end),u=a.getTime();if(!(r.getTime()<=u))throw new RangeError("Invalid interval");var s=y(r,n),l=y(a,n);s.setHours(15),l.setHours(15),u=l.getTime();for(var c=[],d=s;d.getTime()<=u;)d.setHours(0),c.push(i(d)),(d=U(d,1)).setHours(15);return c}function Ze(e){o(1,arguments);for(var n=je(e),t=[],r=0;r<n.length;){var a=n[r++];c(a)&&(t.push(a),d(a)&&(r+=5))}return t}function Ve(e){o(1,arguments);var n=i(e);return n.setDate(1),n.setHours(0,0,0,0),n}function $e(e){o(1,arguments);var n=Ve(e);if(isNaN(n.getTime()))throw new RangeError("The passed date is invalid");return Ze({start:n,end:Ne(e)})}function _e(e){o(1,arguments);var n=i(e),t=n.getFullYear();return n.setFullYear(t+1,0,0),n.setHours(23,59,59,999),n}function Je(e){o(1,arguments);var n=i(e),t=new Date(0);return t.setFullYear(n.getFullYear(),0,1),t.setHours(0,0,0,0),t}function Ke(e){return o(1,arguments),Ze({start:Je(e),end:_e(e)})}function en(e){o(1,arguments);var n=e||{},t=i(n.start),r=i(n.end).getTime();if(!(t.getTime()<=r))throw new RangeError("Invalid interval");var a=[],u=t;for(u.setHours(0,0,0,0),u.setMonth(0,1);u.getTime()<=r;)a.push(i(u)),u.setFullYear(u.getFullYear()+1);return a}function nn(e){o(1,arguments);var n=i(e),t=n.getFullYear(),r=9+10*Math.floor(t/10);return n.setFullYear(r,11,31),n.setHours(23,59,59,999),n}function tn(e){o(1,arguments);var n=i(e);return n.setMinutes(59,59,999),n}function rn(e,n){var t,r,u,s,l,c,d,f;o(1,arguments);var h=m(),A=a(null!==(t=null!==(r=null!==(u=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(l=n.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==u?u:h.weekStartsOn)&&void 0!==r?r:null===(d=h.locale)||void 0===d||null===(f=d.options)||void 0===f?void 0:f.weekStartsOn)&&void 0!==t?t:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=i(e),g=v.getDay(),p=6+(g<A?-7:0)-(g-A);return v.setDate(v.getDate()+p),v.setHours(23,59,59,999),v}function an(e){return o(1,arguments),rn(e,{weekStartsOn:1})}function on(e){o(1,arguments);var n=C(e),t=new Date(0);t.setFullYear(n+1,0,4),t.setHours(0,0,0,0);var r=b(t);return r.setMilliseconds(r.getMilliseconds()-1),r}function un(e){o(1,arguments);var n=i(e);return n.setSeconds(59,999),n}function sn(e){o(1,arguments);var n=i(e),t=n.getMonth(),r=t-t%3+3;return n.setMonth(r,0),n.setHours(23,59,59,999),n}function ln(e){o(1,arguments);var n=i(e);return n.setMilliseconds(999),n}function cn(){return Ye(Date.now())}function dn(){var e=new Date,n=e.getFullYear(),t=e.getMonth(),r=e.getDate(),a=new Date(0);return a.setFullYear(n,t,r+1),a.setHours(23,59,59,999),a}function fn(){var e=new Date,n=e.getFullYear(),t=e.getMonth(),r=e.getDate(),a=new Date(0);return a.setFullYear(n,t,r-1),a.setHours(23,59,59,999),a}function hn(e,n){return o(2,arguments),A(e,-a(n))}function An(e){o(1,arguments);var n=i(e),t=n.getUTCDay(),r=(t<1?7:0)+t-1;return n.setUTCDate(n.getUTCDate()-r),n.setUTCHours(0,0,0,0),n}function vn(e){o(1,arguments);var n=i(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var a=An(r),u=new Date(0);u.setUTCFullYear(t,0,4),u.setUTCHours(0,0,0,0);var s=An(u);return n.getTime()>=a.getTime()?t+1:n.getTime()>=s.getTime()?t:t-1}function gn(e){o(1,arguments);var n=i(e),t=An(n).getTime()-function(e){o(1,arguments);var n=vn(e),t=new Date(0);return t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0),An(t)}(n).getTime();return Math.round(t/6048e5)+1}function pn(e,n){var t,r,u,s,l,c,d,f;o(1,arguments);var h=m(),A=a(null!==(t=null!==(r=null!==(u=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(l=n.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==u?u:h.weekStartsOn)&&void 0!==r?r:null===(d=h.locale)||void 0===d||null===(f=d.options)||void 0===f?void 0:f.weekStartsOn)&&void 0!==t?t:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=i(e),g=v.getUTCDay(),p=(g<A?7:0)+g-A;return v.setUTCDate(v.getUTCDate()-p),v.setUTCHours(0,0,0,0),v}function mn(e,n){var t,r,u,s,l,c,d,f;o(1,arguments);var h=i(e),A=h.getUTCFullYear(),v=m(),g=a(null!==(t=null!==(r=null!==(u=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(l=n.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==u?u:v.firstWeekContainsDate)&&void 0!==r?r:null===(d=v.locale)||void 0===d||null===(f=d.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==t?t:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(A+1,0,g),p.setUTCHours(0,0,0,0);var w=pn(p,n),y=new Date(0);y.setUTCFullYear(A,0,g),y.setUTCHours(0,0,0,0);var b=pn(y,n);return h.getTime()>=w.getTime()?A+1:h.getTime()>=b.getTime()?A:A-1}function wn(e,n){o(1,arguments);var t=i(e),r=pn(t,n).getTime()-function(e,n){var t,r,i,u,s,l,c,d;o(1,arguments);var f=m(),h=a(null!==(t=null!==(r=null!==(i=null!==(u=null==n?void 0:n.firstWeekContainsDate)&&void 0!==u?u:null==n||null===(s=n.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==i?i:f.firstWeekContainsDate)&&void 0!==r?r:null===(c=f.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==t?t:1),A=mn(e,n),v=new Date(0);return v.setUTCFullYear(A,0,h),v.setUTCHours(0,0,0,0),pn(v,n)}(t,n).getTime();return Math.round(r/6048e5)+1}function yn(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}var bn={y:function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return yn("yy"===n?r%100:r,n.length)},M:function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):yn(t+1,2)},d:function(e,n){return yn(e.getUTCDate(),n.length)},a:function(e,n){var t=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.toUpperCase();case"aaa":return t;case"aaaaa":return t[0];default:return"am"===t?"a.m.":"p.m."}},h:function(e,n){return yn(e.getUTCHours()%12||12,n.length)},H:function(e,n){return yn(e.getUTCHours(),n.length)},m:function(e,n){return yn(e.getUTCMinutes(),n.length)},s:function(e,n){return yn(e.getUTCSeconds(),n.length)},S:function(e,n){var t=n.length,r=e.getUTCMilliseconds();return yn(Math.floor(r*Math.pow(10,t-3)),n.length)}};const Cn=bn;function xn(e,n){var t=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return t+String(a);var i=n||"";return t+String(a)+i+yn(o,2)}function Bn(e,n){return e%60==0?(e>0?"-":"+")+yn(Math.abs(e)/60,2):In(e,n)}function In(e,n){var t=n||"",r=e>0?"-":"+",a=Math.abs(e);return r+yn(Math.floor(a/60),2)+t+yn(a%60,2)}const kn={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),a=r>0?r:1-r;return t.ordinalNumber(a,{unit:"year"})}return Cn.y(e,n)},Y:function(e,n,t,r){var a=mn(e,r),o=a>0?a:1-a;return"YY"===n?yn(o%100,2):"Yo"===n?t.ordinalNumber(o,{unit:"year"}):yn(o,n.length)},R:function(e,n){return yn(vn(e),n.length)},u:function(e,n){return yn(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return yn(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return yn(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return Cn.M(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return yn(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var a=wn(e,r);return"wo"===n?t.ordinalNumber(a,{unit:"week"}):yn(a,n.length)},I:function(e,n,t){var r=gn(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):yn(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):Cn.d(e,n)},D:function(e,n,t){var r=function(e){o(1,arguments);var n=i(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=t-n.getTime();return Math.floor(r/864e5)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):yn(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(o);case"ee":return yn(o,2);case"eo":return t.ordinalNumber(o,{unit:"day"});case"eee":return t.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(o);case"cc":return yn(o,n.length);case"co":return t.ordinalNumber(o,{unit:"day"});case"ccc":return t.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(a,{width:"narrow",context:"standalone"});case"cccccc":return t.day(a,{width:"short",context:"standalone"});default:return t.day(a,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),a=0===r?7:r;switch(n){case"i":return String(a);case"ii":return yn(a,n.length);case"io":return t.ordinalNumber(a,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return Cn.h(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Cn.H(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):yn(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):yn(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):Cn.m(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):Cn.s(e,n)},S:function(e,n){return Cn.S(e,n)},X:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(n){case"X":return Bn(a);case"XXXX":case"XX":return In(a);default:return In(a,":")}},x:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return Bn(a);case"xxxx":case"xx":return In(a);default:return In(a,":")}},O:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+xn(a,":");default:return"GMT"+In(a,":")}},z:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+xn(a,":");default:return"GMT"+In(a,":")}},t:function(e,n,t,r){var a=r._originalDate||e;return yn(Math.floor(a.getTime()/1e3),n.length)},T:function(e,n,t,r){return yn((r._originalDate||e).getTime(),n.length)}};var Tn=function(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},Dn=function(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}},Mn={p:Dn,P:function(e,n){var t,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return Tn(e,n);switch(a){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",Tn(a,n)).replace("{{time}}",Dn(o,n))}};const En=Mn;var Sn=["D","DD"],Yn=["YY","YYYY"];function Nn(e){return-1!==Sn.indexOf(e)}function Un(e){return-1!==Yn.indexOf(e)}function On(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Fn={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Hn(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth;return e.formats[t]||e.formats[e.defaultWidth]}}var Wn,Pn={date:Hn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Hn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Hn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},jn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Ln(e){return function(n,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,o=null!=t&&t.width?String(t.width):a;r=e.formattingValues[o]||e.formattingValues[a]}else{var i=e.defaultWidth,u=null!=t&&t.width?String(t.width):e.defaultWidth;r=e.values[u]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(n):n]}}function Rn(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=n.match(a);if(!o)return null;var i,u=o[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(s)?function(e,n){for(var t=0;t<e.length;t++)if(e[t].test(u))return t}(s):function(e,n){for(var t in e)if(e.hasOwnProperty(t)&&e[t].test(u))return t}(s);return i=e.valueCallback?e.valueCallback(l):l,{value:i=t.valueCallback?t.valueCallback(i):i,rest:n.slice(u.length)}}}const qn={code:"en-US",formatDistance:function(e,n,t){var r,a=Fn[e];return r="string"==typeof a?a:1===n?a.one:a.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:Pn,formatRelative:function(e,n,t,r){return jn[e]},localize:{ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:Ln({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Ln({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Ln({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Ln({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Ln({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(Wn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(Wn.matchPattern);if(!t)return null;var r=t[0],a=e.match(Wn.parsePattern);if(!a)return null;var o=Wn.valueCallback?Wn.valueCallback(a[0]):a[0];return{value:o=n.valueCallback?n.valueCallback(o):o,rest:e.slice(r.length)}}),era:Rn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Rn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Rn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Rn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Rn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var zn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Qn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Gn=/^'([^]*?)'?$/,Xn=/''/g,Zn=/[a-zA-Z]/;function Vn(e,n,t){var r,u,s,l,c,d,f,h,A,v,g,p,w,y,b,C,x,I;o(2,arguments);var k=String(n),T=m(),D=null!==(r=null!==(u=null==t?void 0:t.locale)&&void 0!==u?u:T.locale)&&void 0!==r?r:qn,M=a(null!==(s=null!==(l=null!==(c=null!==(d=null==t?void 0:t.firstWeekContainsDate)&&void 0!==d?d:null==t||null===(f=t.locale)||void 0===f||null===(h=f.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==c?c:T.firstWeekContainsDate)&&void 0!==l?l:null===(A=T.locale)||void 0===A||null===(v=A.options)||void 0===v?void 0:v.firstWeekContainsDate)&&void 0!==s?s:1);if(!(M>=1&&M<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var E=a(null!==(g=null!==(p=null!==(w=null!==(y=null==t?void 0:t.weekStartsOn)&&void 0!==y?y:null==t||null===(b=t.locale)||void 0===b||null===(C=b.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==w?w:T.weekStartsOn)&&void 0!==p?p:null===(x=T.locale)||void 0===x||null===(I=x.options)||void 0===I?void 0:I.weekStartsOn)&&void 0!==g?g:0);if(!(E>=0&&E<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!D.localize)throw new RangeError("locale must contain localize property");if(!D.formatLong)throw new RangeError("locale must contain formatLong property");var S=i(e);if(!de(S))throw new RangeError("Invalid time value");var Y=hn(S,B(S)),N={firstWeekContainsDate:M,weekStartsOn:E,locale:D,_originalDate:S};return k.match(Qn).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,En[n])(e,D.formatLong):e})).join("").match(zn).map((function(r){if("''"===r)return"'";var a,o,i=r[0];if("'"===i)return(o=(a=r).match(Gn))?o[1].replace(Xn,"'"):a;var u=kn[i];if(u)return null!=t&&t.useAdditionalWeekYearTokens||!Un(r)||On(r,n,String(e)),null!=t&&t.useAdditionalDayOfYearTokens||!Nn(r)||On(r,n,String(e)),u(Y,r,D.localize,N);if(i.match(Zn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}function $n(e,n){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t]);return e}function _n(e){return $n({},e)}var Jn=1440,Kn=2520,et=43200,nt=86400;function tt(e,n,t){var r,a;o(2,arguments);var u=m(),s=null!==(r=null!==(a=null==t?void 0:t.locale)&&void 0!==a?a:u.locale)&&void 0!==r?r:qn;if(!s.formatDistance)throw new RangeError("locale must contain formatDistance property");var l=R(e,n);if(isNaN(l))throw new RangeError("Invalid time value");var c,d,f=$n(_n(t),{addSuffix:Boolean(null==t?void 0:t.addSuffix),comparison:l});l>0?(c=i(n),d=i(e)):(c=i(e),d=i(n));var h,A=He(d,c),v=(B(d)-B(c))/1e3,g=Math.round((A-v)/60);if(g<2)return null!=t&&t.includeSeconds?A<5?s.formatDistance("lessThanXSeconds",5,f):A<10?s.formatDistance("lessThanXSeconds",10,f):A<20?s.formatDistance("lessThanXSeconds",20,f):A<40?s.formatDistance("halfAMinute",0,f):A<60?s.formatDistance("lessThanXMinutes",1,f):s.formatDistance("xMinutes",1,f):0===g?s.formatDistance("lessThanXMinutes",1,f):s.formatDistance("xMinutes",g,f);if(g<45)return s.formatDistance("xMinutes",g,f);if(g<90)return s.formatDistance("aboutXHours",1,f);if(g<Jn){var p=Math.round(g/60);return s.formatDistance("aboutXHours",p,f)}if(g<Kn)return s.formatDistance("xDays",1,f);if(g<et){var w=Math.round(g/Jn);return s.formatDistance("xDays",w,f)}if(g<nt)return h=Math.round(g/et),s.formatDistance("aboutXMonths",h,f);if((h=Oe(d,c))<12){var y=Math.round(g/et);return s.formatDistance("xMonths",y,f)}var b=h%12,C=Math.floor(h/12);return b<3?s.formatDistance("aboutXYears",C,f):b<9?s.formatDistance("overXYears",C,f):s.formatDistance("almostXYears",C+1,f)}var rt=6e4,at=1440,ot=30*at,it=365*at;function ut(e,n,t){var r,a,u;o(2,arguments);var s=m(),l=null!==(r=null!==(a=null==t?void 0:t.locale)&&void 0!==a?a:s.locale)&&void 0!==r?r:qn;if(!l.formatDistance)throw new RangeError("locale must contain localize.formatDistance property");var c=R(e,n);if(isNaN(c))throw new RangeError("Invalid time value");var d,f,h=$n(_n(t),{addSuffix:Boolean(null==t?void 0:t.addSuffix),comparison:c});c>0?(d=i(n),f=i(e)):(d=i(e),f=i(n));var A,v=String(null!==(u=null==t?void 0:t.roundingMethod)&&void 0!==u?u:"round");if("floor"===v)A=Math.floor;else if("ceil"===v)A=Math.ceil;else{if("round"!==v)throw new RangeError("roundingMethod must be 'floor', 'ceil' or 'round'");A=Math.round}var g,p=f.getTime()-d.getTime(),w=p/rt,y=(p-(B(f)-B(d)))/rt,b=null==t?void 0:t.unit;if("second"===(g=b?String(b):w<1?"second":w<60?"minute":w<at?"hour":y<ot?"day":y<it?"month":"year")){var C=A(p/1e3);return l.formatDistance("xSeconds",C,h)}if("minute"===g){var x=A(w);return l.formatDistance("xMinutes",x,h)}if("hour"===g){var I=A(w/60);return l.formatDistance("xHours",I,h)}if("day"===g){var k=A(y/at);return l.formatDistance("xDays",k,h)}if("month"===g){var T=A(y/ot);return 12===T&&"month"!==b?l.formatDistance("xYears",1,h):l.formatDistance("xMonths",T,h)}if("year"===g){var D=A(y/it);return l.formatDistance("xYears",D,h)}throw new RangeError("unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'")}function st(e,n){return o(1,arguments),tt(e,Date.now(),n)}function lt(e,n){return o(1,arguments),ut(e,Date.now(),n)}var ct=["years","months","weeks","days","hours","minutes","seconds"];function dt(e,n){var t,r,a,o,i;if(arguments.length<1)throw new TypeError("1 argument required, but only ".concat(arguments.length," present"));var u=m(),s=null!==(t=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:u.locale)&&void 0!==t?t:qn,l=null!==(a=null==n?void 0:n.format)&&void 0!==a?a:ct,c=null!==(o=null==n?void 0:n.zero)&&void 0!==o&&o,d=null!==(i=null==n?void 0:n.delimiter)&&void 0!==i?i:" ";return s.formatDistance?l.reduce((function(n,t){var r="x".concat(t.replace(/(^.)/,(function(e){return e.toUpperCase()}))),a=e[t];return"number"==typeof a&&(c||e[t])?n.concat(s.formatDistance(r,a)):n}),[]).join(d):""}function ft(e,n){var t,r;o(1,arguments);var a=i(e);if(isNaN(a.getTime()))throw new RangeError("Invalid time value");var u=String(null!==(t=null==n?void 0:n.format)&&void 0!==t?t:"extended"),s=String(null!==(r=null==n?void 0:n.representation)&&void 0!==r?r:"complete");if("extended"!==u&&"basic"!==u)throw new RangeError("format must be 'extended' or 'basic'");if("date"!==s&&"time"!==s&&"complete"!==s)throw new RangeError("representation must be 'date', 'time', or 'complete'");var l="",c="",d="extended"===u?"-":"",f="extended"===u?":":"";if("time"!==s){var h=yn(a.getDate(),2),A=yn(a.getMonth()+1,2),v=yn(a.getFullYear(),4);l="".concat(v).concat(d).concat(A).concat(d).concat(h)}if("date"!==s){var g=a.getTimezoneOffset();if(0!==g){var p=Math.abs(g),m=yn(Math.floor(p/60),2),w=yn(p%60,2);c="".concat(g<0?"+":"-").concat(m,":").concat(w)}else c="Z";var y=""===l?"":"T",b=[yn(a.getHours(),2),yn(a.getMinutes(),2),yn(a.getSeconds(),2)].join(f);l="".concat(l).concat(y).concat(b).concat(c)}return l}function ht(e,n){var t,r;if(arguments.length<1)throw new TypeError("1 argument required, but only ".concat(arguments.length," present"));var a=i(e);if(!de(a))throw new RangeError("Invalid time value");var o=String(null!==(t=null==n?void 0:n.format)&&void 0!==t?t:"extended"),u=String(null!==(r=null==n?void 0:n.representation)&&void 0!==r?r:"complete");if("extended"!==o&&"basic"!==o)throw new RangeError("format must be 'extended' or 'basic'");if("date"!==u&&"time"!==u&&"complete"!==u)throw new RangeError("representation must be 'date', 'time', or 'complete'");var s="",l="extended"===o?"-":"",c="extended"===o?":":"";if("time"!==u){var d=yn(a.getDate(),2),f=yn(a.getMonth()+1,2),h=yn(a.getFullYear(),4);s="".concat(h).concat(l).concat(f).concat(l).concat(d)}if("date"!==u){var A=yn(a.getHours(),2),v=yn(a.getMinutes(),2),g=yn(a.getSeconds(),2),p=""===s?"":" ";s="".concat(s).concat(p).concat(A).concat(c).concat(v).concat(c).concat(g)}return s}function At(e){if(o(1,arguments),"object"!==r(e))throw new Error("Duration must be an object");var n=e.years,t=void 0===n?0:n,a=e.months,i=void 0===a?0:a,u=e.days,s=void 0===u?0:u,l=e.hours,c=void 0===l?0:l,d=e.minutes,f=void 0===d?0:d,h=e.seconds,A=void 0===h?0:h;return"P".concat(t,"Y").concat(i,"M").concat(s,"DT").concat(c,"H").concat(f,"M").concat(A,"S")}function vt(e,n){var t;if(arguments.length<1)throw new TypeError("1 arguments required, but only ".concat(arguments.length," present"));var r=i(e);if(!de(r))throw new RangeError("Invalid time value");var o=Number(null!==(t=null==n?void 0:n.fractionDigits)&&void 0!==t?t:0);if(!(o>=0&&o<=3))throw new RangeError("fractionDigits must be between 0 and 3 inclusively");var u=yn(r.getDate(),2),s=yn(r.getMonth()+1,2),l=r.getFullYear(),c=yn(r.getHours(),2),d=yn(r.getMinutes(),2),f=yn(r.getSeconds(),2),h="";if(o>0){var A=r.getMilliseconds();h="."+yn(Math.floor(A*Math.pow(10,o-3)),o)}var v="",g=r.getTimezoneOffset();if(0!==g){var p=Math.abs(g),m=yn(a(p/60),2),w=yn(p%60,2);v="".concat(g<0?"+":"-").concat(m,":").concat(w)}else v="Z";return"".concat(l,"-").concat(s,"-").concat(u,"T").concat(c,":").concat(d,":").concat(f).concat(h).concat(v)}var gt=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],pt=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function mt(e){if(arguments.length<1)throw new TypeError("1 arguments required, but only ".concat(arguments.length," present"));var n=i(e);if(!de(n))throw new RangeError("Invalid time value");var t=gt[n.getUTCDay()],r=yn(n.getUTCDate(),2),a=pt[n.getUTCMonth()],o=n.getUTCFullYear(),u=yn(n.getUTCHours(),2),s=yn(n.getUTCMinutes(),2),l=yn(n.getUTCSeconds(),2);return"".concat(t,", ").concat(r," ").concat(a," ").concat(o," ").concat(u,":").concat(s,":").concat(l," GMT")}function wt(e,n,t){var r,u,s,l,c,d,f,h,A,v;o(2,arguments);var g=i(e),p=i(n),w=m(),y=null!==(r=null!==(u=null==t?void 0:t.locale)&&void 0!==u?u:w.locale)&&void 0!==r?r:qn,b=a(null!==(s=null!==(l=null!==(c=null!==(d=null==t?void 0:t.weekStartsOn)&&void 0!==d?d:null==t||null===(f=t.locale)||void 0===f||null===(h=f.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==c?c:w.weekStartsOn)&&void 0!==l?l:null===(A=w.locale)||void 0===A||null===(v=A.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==s?s:0);if(!y.localize)throw new RangeError("locale must contain localize property");if(!y.formatLong)throw new RangeError("locale must contain formatLong property");if(!y.formatRelative)throw new RangeError("locale must contain formatRelative property");var C,x=T(g,p);if(isNaN(x))throw new RangeError("Invalid time value");C=x<-6?"other":x<-1?"lastWeek":x<0?"yesterday":x<1?"today":x<2?"tomorrow":x<7?"nextWeek":"other";var I=hn(g,B(g)),k=hn(p,B(p));return Vn(g,y.formatRelative(C,I,k,{locale:y,weekStartsOn:b}),{locale:y,weekStartsOn:b})}function yt(e){return o(1,arguments),i(1e3*a(e))}function bt(e){return o(1,arguments),i(e).getDate()}function Ct(e){return o(1,arguments),i(e).getDay()}function xt(e){o(1,arguments);var n=i(e);return T(n,Je(n))+1}function Bt(e){o(1,arguments);var n=i(e),t=n.getFullYear(),r=n.getMonth(),a=new Date(0);return a.setFullYear(t,r+1,0),a.setHours(0,0,0,0),a.getDate()}function It(e){o(1,arguments);var n=i(e).getFullYear();return n%400==0||n%4==0&&n%100!=0}function kt(e){o(1,arguments);var n=i(e);return"Invalid Date"===String(new Date(n))?NaN:It(n)?366:365}function Tt(e){o(1,arguments);var n=i(e).getFullYear();return 10*Math.floor(n/10)}function Dt(){return $n({},m())}function Mt(e){return o(1,arguments),i(e).getHours()}function Et(e){o(1,arguments);var n=i(e).getDay();return 0===n&&(n=7),n}var St=6048e5;function Yt(e){o(1,arguments);var n=i(e),t=b(n).getTime()-x(n).getTime();return Math.round(t/St)+1}var Nt=6048e5;function Ut(e){o(1,arguments);var n=x(e),t=x(U(n,60)).valueOf()-n.valueOf();return Math.round(t/Nt)}function Ot(e){return o(1,arguments),i(e).getMilliseconds()}function Ft(e){return o(1,arguments),i(e).getMinutes()}function Ht(e){return o(1,arguments),i(e).getMonth()}var Wt=864e5;function Pt(e,n){o(2,arguments);var t=e||{},r=n||{},a=i(t.start).getTime(),u=i(t.end).getTime(),s=i(r.start).getTime(),l=i(r.end).getTime();if(!(a<=u&&s<=l))throw new RangeError("Invalid interval");if(!(a<l&&s<u))return 0;var c=(l>u?u:l)-(s<a?a:s);return Math.ceil(c/Wt)}function jt(e){return o(1,arguments),i(e).getSeconds()}function Lt(e){return o(1,arguments),i(e).getTime()}function Rt(e){return o(1,arguments),Math.floor(Lt(e)/1e3)}function qt(e,n){var t,r,u,s,l,c,d,f;o(1,arguments);var h=i(e),A=h.getFullYear(),v=m(),g=a(null!==(t=null!==(r=null!==(u=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(l=n.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==u?u:v.firstWeekContainsDate)&&void 0!==r?r:null===(d=v.locale)||void 0===d||null===(f=d.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==t?t:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setFullYear(A+1,0,g),p.setHours(0,0,0,0);var w=y(p,n),b=new Date(0);b.setFullYear(A,0,g),b.setHours(0,0,0,0);var C=y(b,n);return h.getTime()>=w.getTime()?A+1:h.getTime()>=C.getTime()?A:A-1}function zt(e,n){var t,r,i,u,s,l,c,d;o(1,arguments);var f=m(),h=a(null!==(t=null!==(r=null!==(i=null!==(u=null==n?void 0:n.firstWeekContainsDate)&&void 0!==u?u:null==n||null===(s=n.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==i?i:f.firstWeekContainsDate)&&void 0!==r?r:null===(c=f.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==t?t:1),A=qt(e,n),v=new Date(0);return v.setFullYear(A,0,h),v.setHours(0,0,0,0),y(v,n)}var Qt=6048e5;function Gt(e,n){o(1,arguments);var t=i(e),r=y(t,n).getTime()-zt(t,n).getTime();return Math.round(r/Qt)+1}function Xt(e,n){var t,r,i,u,s,l,c,d;o(1,arguments);var f=m(),h=a(null!==(t=null!==(r=null!==(i=null!==(u=null==n?void 0:n.weekStartsOn)&&void 0!==u?u:null==n||null===(s=n.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==i?i:f.weekStartsOn)&&void 0!==r?r:null===(c=f.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==t?t:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=bt(e);if(isNaN(A))return NaN;var v=h-Ct(Ve(e));v<=0&&(v+=7);var g=A-v;return Math.ceil(g/7)+1}function Zt(e){o(1,arguments);var n=i(e),t=n.getMonth();return n.setFullYear(n.getFullYear(),t+1,0),n.setHours(0,0,0,0),n}function Vt(e,n){return o(1,arguments),ye(Zt(e),Ve(e),n)+1}function $t(e){return o(1,arguments),i(e).getFullYear()}function _t(e){return o(1,arguments),Math.floor(e*Z)}function Jt(e){return o(1,arguments),Math.floor(e*_)}function Kt(e){return o(1,arguments),Math.floor(e*ne)}function er(e){o(1,arguments);var n=i(e.start),t=i(e.end);if(isNaN(n.getTime()))throw new RangeError("Start Date is invalid");if(isNaN(t.getTime()))throw new RangeError("End Date is invalid");var r={};r.years=Math.abs(Pe(t,n));var a=R(t,n),u=l(n,{years:a*r.years});r.months=Math.abs(Oe(t,u));var s=l(u,{months:a*r.months});r.days=Math.abs(xe(t,s));var c=l(s,{days:a*r.days});r.hours=Math.abs(De(t,c));var d=l(c,{hours:a*r.hours});r.minutes=Math.abs(Se(t,d));var f=l(d,{minutes:a*r.minutes});return r.seconds=Math.abs(He(t,f)),r}function nr(e,n,t){var r,a,i;return o(1,arguments),void 0===(i=n)||"locale"in i?t=n:a=n,new Intl.DateTimeFormat(null===(r=t)||void 0===r?void 0:r.locale,a).format(e)}function tr(e,n,t){o(2,arguments);var r,a=0,u=i(e),s=i(n);if(null!=t&&t.unit)"second"===(r=null==t?void 0:t.unit)?a=He(u,s):"minute"===r?a=Se(u,s):"hour"===r?a=De(u,s):"day"===r?a=T(u,s):"week"===r?a=ye(u,s):"month"===r?a=ge(u,s):"quarter"===r?a=me(u,s):"year"===r&&(a=be(u,s));else{var l=He(u,s);Math.abs(l)<te?(a=He(u,s),r="second"):Math.abs(l)<ne?(a=Se(u,s),r="minute"):Math.abs(l)<re&&Math.abs(T(u,s))<1?(a=De(u,s),r="hour"):Math.abs(l)<ae&&(a=T(u,s))&&Math.abs(a)<7?r="day":Math.abs(l)<ie?(a=ye(u,s),r="week"):Math.abs(l)<ue?(a=ge(u,s),r="month"):Math.abs(l)<oe&&me(u,s)<4?(a=me(u,s),r="quarter"):(a=be(u,s),r="year")}return new Intl.RelativeTimeFormat(null==t?void 0:t.locale,{localeMatcher:null==t?void 0:t.localeMatcher,numeric:(null==t?void 0:t.numeric)||"auto",style:null==t?void 0:t.style}).format(a,r)}function rr(e,n){o(2,arguments);var t=i(e),r=i(n);return t.getTime()>r.getTime()}function ar(e,n){o(2,arguments);var t=i(e),r=i(n);return t.getTime()<r.getTime()}function or(e,n){o(2,arguments);var t=i(e),r=i(n);return t.getTime()===r.getTime()}function ir(e,n,t){if(arguments.length<3)throw new TypeError("3 argument required, but only "+arguments.length+" present");var r=new Date(e,n,t);return r.getFullYear()===e&&r.getMonth()===n&&r.getDate()===t}function ur(e){return o(1,arguments),1===i(e).getDate()}function sr(e){return o(1,arguments),5===i(e).getDay()}function lr(e){return o(1,arguments),i(e).getTime()>Date.now()}function cr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function dr(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(e){if("string"==typeof e)return cr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?cr(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,u=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return i=e.done,e},e:function(e){u=!0,o=e},f:function(){try{i||null==t.return||t.return()}finally{if(u)throw o}}}}function fr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function hr(e,n){return hr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},hr(e,n)}function Ar(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&hr(e,n)}function vr(e){return vr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},vr(e)}function gr(e){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var t,a=vr(e);if(n){var o=vr(this).constructor;t=Reflect.construct(a,arguments,o)}else t=a.apply(this,arguments);return function(e,n){if(n&&("object"===r(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return fr(e)}(this,t)}}function pr(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function mr(e){var n=function(e,n){if("object"!==r(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var a=t.call(e,"string");if("object"!==r(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===r(n)?n:String(n)}function wr(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,mr(r.key),r)}}function yr(e,n,t){return n&&wr(e.prototype,n),t&&wr(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function br(e,n,t){return(n=mr(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Cr=function(){function e(){pr(this,e),br(this,"priority",void 0),br(this,"subPriority",0)}return yr(e,[{key:"validate",value:function(e,n){return!0}}]),e}(),xr=function(e){Ar(t,e);var n=gr(t);function t(e,r,a,o,i){var u;return pr(this,t),(u=n.call(this)).value=e,u.validateValue=r,u.setValue=a,u.priority=o,i&&(u.subPriority=i),u}return yr(t,[{key:"validate",value:function(e,n){return this.validateValue(e,this.value,n)}},{key:"set",value:function(e,n,t){return this.setValue(e,n,this.value,t)}}]),t}(Cr),Br=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",10),br(fr(e),"subPriority",-1),e}return yr(t,[{key:"set",value:function(e,n){if(n.timestampIsSet)return e;var t=new Date(0);return t.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),t.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),t}}]),t}(Cr),Ir=function(){function e(){pr(this,e),br(this,"incompatibleTokens",void 0),br(this,"priority",void 0),br(this,"subPriority",void 0)}return yr(e,[{key:"run",value:function(e,n,t,r){var a=this.parse(e,n,t,r);return a?{setter:new xr(a.value,this.validate,this.set,this.priority,this.subPriority),rest:a.rest}:null}},{key:"validate",value:function(e,n,t){return!0}}]),e}(),kr=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",140),br(fr(e),"incompatibleTokens",["R","u","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"G":case"GG":case"GGG":return t.era(e,{width:"abbreviated"})||t.era(e,{width:"narrow"});case"GGGGG":return t.era(e,{width:"narrow"});default:return t.era(e,{width:"wide"})||t.era(e,{width:"abbreviated"})||t.era(e,{width:"narrow"})}}},{key:"set",value:function(e,n,t){return n.era=t,e.setUTCFullYear(t,0,1),e.setUTCHours(0,0,0,0),e}}]),t}(Ir),Tr=/^(1[0-2]|0?\d)/,Dr=/^(3[0-1]|[0-2]?\d)/,Mr=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Er=/^(5[0-3]|[0-4]?\d)/,Sr=/^(2[0-3]|[0-1]?\d)/,Yr=/^(2[0-4]|[0-1]?\d)/,Nr=/^(1[0-1]|0?\d)/,Ur=/^(1[0-2]|0?\d)/,Or=/^[0-5]?\d/,Fr=/^[0-5]?\d/,Hr=/^\d/,Wr=/^\d{1,2}/,Pr=/^\d{1,3}/,jr=/^\d{1,4}/,Lr=/^-?\d+/,Rr=/^-?\d/,qr=/^-?\d{1,2}/,zr=/^-?\d{1,3}/,Qr=/^-?\d{1,4}/,Gr=/^([+-])(\d{2})(\d{2})?|Z/,Xr=/^([+-])(\d{2})(\d{2})|Z/,Zr=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,Vr=/^([+-])(\d{2}):(\d{2})|Z/,$r=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function _r(e,n){return e?{value:n(e.value),rest:e.rest}:e}function Jr(e,n){var t=n.match(e);return t?{value:parseInt(t[0],10),rest:n.slice(t[0].length)}:null}function Kr(e,n){var t=n.match(e);if(!t)return null;if("Z"===t[0])return{value:0,rest:n.slice(1)};var r="+"===t[1]?1:-1,a=t[2]?parseInt(t[2],10):0,o=t[3]?parseInt(t[3],10):0,i=t[5]?parseInt(t[5],10):0;return{value:r*(a*Z+o*X+i*V),rest:n.slice(t[0].length)}}function ea(e){return Jr(Lr,e)}function na(e,n){switch(e){case 1:return Jr(Hr,n);case 2:return Jr(Wr,n);case 3:return Jr(Pr,n);case 4:return Jr(jr,n);default:return Jr(new RegExp("^\\d{1,"+e+"}"),n)}}function ta(e,n){switch(e){case 1:return Jr(Rr,n);case 2:return Jr(qr,n);case 3:return Jr(zr,n);case 4:return Jr(Qr,n);default:return Jr(new RegExp("^-?\\d{1,"+e+"}"),n)}}function ra(e){switch(e){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function aa(e,n){var t,r=n>0,a=r?n:1-n;if(a<=50)t=e||100;else{var o=a+50;t=e+100*Math.floor(o/100)-(e>=o%100?100:0)}return r?t:1-t}function oa(e){return e%400==0||e%4==0&&e%100!=0}var ia=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",130),br(fr(e),"incompatibleTokens",["Y","R","u","w","I","i","e","c","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){var r=function(e){return{year:e,isTwoDigitYear:"yy"===n}};switch(n){case"y":return _r(na(4,e),r);case"yo":return _r(t.ordinalNumber(e,{unit:"year"}),r);default:return _r(na(n.length,e),r)}}},{key:"validate",value:function(e,n){return n.isTwoDigitYear||n.year>0}},{key:"set",value:function(e,n,t){var r=e.getUTCFullYear();if(t.isTwoDigitYear){var a=aa(t.year,r);return e.setUTCFullYear(a,0,1),e.setUTCHours(0,0,0,0),e}var o="era"in n&&1!==n.era?1-t.year:t.year;return e.setUTCFullYear(o,0,1),e.setUTCHours(0,0,0,0),e}}]),t}(Ir),ua=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",130),br(fr(e),"incompatibleTokens",["y","R","u","Q","q","M","L","I","d","D","i","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){var r=function(e){return{year:e,isTwoDigitYear:"YY"===n}};switch(n){case"Y":return _r(na(4,e),r);case"Yo":return _r(t.ordinalNumber(e,{unit:"year"}),r);default:return _r(na(n.length,e),r)}}},{key:"validate",value:function(e,n){return n.isTwoDigitYear||n.year>0}},{key:"set",value:function(e,n,t,r){var a=mn(e,r);if(t.isTwoDigitYear){var o=aa(t.year,a);return e.setUTCFullYear(o,0,r.firstWeekContainsDate),e.setUTCHours(0,0,0,0),pn(e,r)}var i="era"in n&&1!==n.era?1-t.year:t.year;return e.setUTCFullYear(i,0,r.firstWeekContainsDate),e.setUTCHours(0,0,0,0),pn(e,r)}}]),t}(Ir),sa=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",130),br(fr(e),"incompatibleTokens",["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n){return ta("R"===n?4:n.length,e)}},{key:"set",value:function(e,n,t){var r=new Date(0);return r.setUTCFullYear(t,0,4),r.setUTCHours(0,0,0,0),An(r)}}]),t}(Ir),la=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",130),br(fr(e),"incompatibleTokens",["G","y","Y","R","w","I","i","e","c","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n){return ta("u"===n?4:n.length,e)}},{key:"set",value:function(e,n,t){return e.setUTCFullYear(t,0,1),e.setUTCHours(0,0,0,0),e}}]),t}(Ir),ca=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",120),br(fr(e),"incompatibleTokens",["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"Q":case"QQ":return na(n.length,e);case"Qo":return t.ordinalNumber(e,{unit:"quarter"});case"QQQ":return t.quarter(e,{width:"abbreviated",context:"formatting"})||t.quarter(e,{width:"narrow",context:"formatting"});case"QQQQQ":return t.quarter(e,{width:"narrow",context:"formatting"});default:return t.quarter(e,{width:"wide",context:"formatting"})||t.quarter(e,{width:"abbreviated",context:"formatting"})||t.quarter(e,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(e,n){return n>=1&&n<=4}},{key:"set",value:function(e,n,t){return e.setUTCMonth(3*(t-1),1),e.setUTCHours(0,0,0,0),e}}]),t}(Ir),da=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",120),br(fr(e),"incompatibleTokens",["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"q":case"qq":return na(n.length,e);case"qo":return t.ordinalNumber(e,{unit:"quarter"});case"qqq":return t.quarter(e,{width:"abbreviated",context:"standalone"})||t.quarter(e,{width:"narrow",context:"standalone"});case"qqqqq":return t.quarter(e,{width:"narrow",context:"standalone"});default:return t.quarter(e,{width:"wide",context:"standalone"})||t.quarter(e,{width:"abbreviated",context:"standalone"})||t.quarter(e,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(e,n){return n>=1&&n<=4}},{key:"set",value:function(e,n,t){return e.setUTCMonth(3*(t-1),1),e.setUTCHours(0,0,0,0),e}}]),t}(Ir),fa=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"incompatibleTokens",["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]),br(fr(e),"priority",110),e}return yr(t,[{key:"parse",value:function(e,n,t){var r=function(e){return e-1};switch(n){case"M":return _r(Jr(Tr,e),r);case"MM":return _r(na(2,e),r);case"Mo":return _r(t.ordinalNumber(e,{unit:"month"}),r);case"MMM":return t.month(e,{width:"abbreviated",context:"formatting"})||t.month(e,{width:"narrow",context:"formatting"});case"MMMMM":return t.month(e,{width:"narrow",context:"formatting"});default:return t.month(e,{width:"wide",context:"formatting"})||t.month(e,{width:"abbreviated",context:"formatting"})||t.month(e,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(e,n){return n>=0&&n<=11}},{key:"set",value:function(e,n,t){return e.setUTCMonth(t,1),e.setUTCHours(0,0,0,0),e}}]),t}(Ir),ha=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",110),br(fr(e),"incompatibleTokens",["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){var r=function(e){return e-1};switch(n){case"L":return _r(Jr(Tr,e),r);case"LL":return _r(na(2,e),r);case"Lo":return _r(t.ordinalNumber(e,{unit:"month"}),r);case"LLL":return t.month(e,{width:"abbreviated",context:"standalone"})||t.month(e,{width:"narrow",context:"standalone"});case"LLLLL":return t.month(e,{width:"narrow",context:"standalone"});default:return t.month(e,{width:"wide",context:"standalone"})||t.month(e,{width:"abbreviated",context:"standalone"})||t.month(e,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(e,n){return n>=0&&n<=11}},{key:"set",value:function(e,n,t){return e.setUTCMonth(t,1),e.setUTCHours(0,0,0,0),e}}]),t}(Ir),Aa=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",100),br(fr(e),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","i","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"w":return Jr(Er,e);case"wo":return t.ordinalNumber(e,{unit:"week"});default:return na(n.length,e)}}},{key:"validate",value:function(e,n){return n>=1&&n<=53}},{key:"set",value:function(e,n,t,r){return pn(function(e,n,t){o(2,arguments);var r=i(e),u=a(n),s=wn(r,t)-u;return r.setUTCDate(r.getUTCDate()-7*s),r}(e,t,r),r)}}]),t}(Ir),va=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",100),br(fr(e),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"I":return Jr(Er,e);case"Io":return t.ordinalNumber(e,{unit:"week"});default:return na(n.length,e)}}},{key:"validate",value:function(e,n){return n>=1&&n<=53}},{key:"set",value:function(e,n,t){return An(function(e,n){o(2,arguments);var t=i(e),r=a(n),u=gn(t)-r;return t.setUTCDate(t.getUTCDate()-7*u),t}(e,t))}}]),t}(Ir),ga=[31,28,31,30,31,30,31,31,30,31,30,31],pa=[31,29,31,30,31,30,31,31,30,31,30,31],ma=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",90),br(fr(e),"subPriority",1),br(fr(e),"incompatibleTokens",["Y","R","q","Q","w","I","D","i","e","c","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"d":return Jr(Dr,e);case"do":return t.ordinalNumber(e,{unit:"date"});default:return na(n.length,e)}}},{key:"validate",value:function(e,n){var t=oa(e.getUTCFullYear()),r=e.getUTCMonth();return t?n>=1&&n<=pa[r]:n>=1&&n<=ga[r]}},{key:"set",value:function(e,n,t){return e.setUTCDate(t),e.setUTCHours(0,0,0,0),e}}]),t}(Ir),wa=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",90),br(fr(e),"subpriority",1),br(fr(e),"incompatibleTokens",["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"D":case"DD":return Jr(Mr,e);case"Do":return t.ordinalNumber(e,{unit:"date"});default:return na(n.length,e)}}},{key:"validate",value:function(e,n){return oa(e.getUTCFullYear())?n>=1&&n<=366:n>=1&&n<=365}},{key:"set",value:function(e,n,t){return e.setUTCMonth(0,t),e.setUTCHours(0,0,0,0),e}}]),t}(Ir);function ya(e,n,t){var r,u,s,l,c,d,f,h;o(2,arguments);var A=m(),v=a(null!==(r=null!==(u=null!==(s=null!==(l=null==t?void 0:t.weekStartsOn)&&void 0!==l?l:null==t||null===(c=t.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==s?s:A.weekStartsOn)&&void 0!==u?u:null===(f=A.locale)||void 0===f||null===(h=f.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==r?r:0);if(!(v>=0&&v<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=i(e),p=a(n),w=((p%7+7)%7<v?7:0)+p-g.getUTCDay();return g.setUTCDate(g.getUTCDate()+w),g}var ba=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",90),br(fr(e),"incompatibleTokens",["D","i","e","c","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"E":case"EE":case"EEE":return t.day(e,{width:"abbreviated",context:"formatting"})||t.day(e,{width:"short",context:"formatting"})||t.day(e,{width:"narrow",context:"formatting"});case"EEEEE":return t.day(e,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(e,{width:"short",context:"formatting"})||t.day(e,{width:"narrow",context:"formatting"});default:return t.day(e,{width:"wide",context:"formatting"})||t.day(e,{width:"abbreviated",context:"formatting"})||t.day(e,{width:"short",context:"formatting"})||t.day(e,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(e,n){return n>=0&&n<=6}},{key:"set",value:function(e,n,t,r){return(e=ya(e,t,r)).setUTCHours(0,0,0,0),e}}]),t}(Ir),Ca=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",90),br(fr(e),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t,r){var a=function(e){var n=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+n};switch(n){case"e":case"ee":return _r(na(n.length,e),a);case"eo":return _r(t.ordinalNumber(e,{unit:"day"}),a);case"eee":return t.day(e,{width:"abbreviated",context:"formatting"})||t.day(e,{width:"short",context:"formatting"})||t.day(e,{width:"narrow",context:"formatting"});case"eeeee":return t.day(e,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(e,{width:"short",context:"formatting"})||t.day(e,{width:"narrow",context:"formatting"});default:return t.day(e,{width:"wide",context:"formatting"})||t.day(e,{width:"abbreviated",context:"formatting"})||t.day(e,{width:"short",context:"formatting"})||t.day(e,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(e,n){return n>=0&&n<=6}},{key:"set",value:function(e,n,t,r){return(e=ya(e,t,r)).setUTCHours(0,0,0,0),e}}]),t}(Ir),xa=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",90),br(fr(e),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t,r){var a=function(e){var n=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+n};switch(n){case"c":case"cc":return _r(na(n.length,e),a);case"co":return _r(t.ordinalNumber(e,{unit:"day"}),a);case"ccc":return t.day(e,{width:"abbreviated",context:"standalone"})||t.day(e,{width:"short",context:"standalone"})||t.day(e,{width:"narrow",context:"standalone"});case"ccccc":return t.day(e,{width:"narrow",context:"standalone"});case"cccccc":return t.day(e,{width:"short",context:"standalone"})||t.day(e,{width:"narrow",context:"standalone"});default:return t.day(e,{width:"wide",context:"standalone"})||t.day(e,{width:"abbreviated",context:"standalone"})||t.day(e,{width:"short",context:"standalone"})||t.day(e,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(e,n){return n>=0&&n<=6}},{key:"set",value:function(e,n,t,r){return(e=ya(e,t,r)).setUTCHours(0,0,0,0),e}}]),t}(Ir),Ba=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",90),br(fr(e),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){var r=function(e){return 0===e?7:e};switch(n){case"i":case"ii":return na(n.length,e);case"io":return t.ordinalNumber(e,{unit:"day"});case"iii":return _r(t.day(e,{width:"abbreviated",context:"formatting"})||t.day(e,{width:"short",context:"formatting"})||t.day(e,{width:"narrow",context:"formatting"}),r);case"iiiii":return _r(t.day(e,{width:"narrow",context:"formatting"}),r);case"iiiiii":return _r(t.day(e,{width:"short",context:"formatting"})||t.day(e,{width:"narrow",context:"formatting"}),r);default:return _r(t.day(e,{width:"wide",context:"formatting"})||t.day(e,{width:"abbreviated",context:"formatting"})||t.day(e,{width:"short",context:"formatting"})||t.day(e,{width:"narrow",context:"formatting"}),r)}}},{key:"validate",value:function(e,n){return n>=1&&n<=7}},{key:"set",value:function(e,n,t){return e=function(e,n){o(2,arguments);var t=a(n);t%7==0&&(t-=7);var r=i(e),u=((t%7+7)%7<1?7:0)+t-r.getUTCDay();return r.setUTCDate(r.getUTCDate()+u),r}(e,t),e.setUTCHours(0,0,0,0),e}}]),t}(Ir),Ia=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",80),br(fr(e),"incompatibleTokens",["b","B","H","k","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"a":case"aa":case"aaa":return t.dayPeriod(e,{width:"abbreviated",context:"formatting"})||t.dayPeriod(e,{width:"narrow",context:"formatting"});case"aaaaa":return t.dayPeriod(e,{width:"narrow",context:"formatting"});default:return t.dayPeriod(e,{width:"wide",context:"formatting"})||t.dayPeriod(e,{width:"abbreviated",context:"formatting"})||t.dayPeriod(e,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(e,n,t){return e.setUTCHours(ra(t),0,0,0),e}}]),t}(Ir),ka=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",80),br(fr(e),"incompatibleTokens",["a","B","H","k","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"b":case"bb":case"bbb":return t.dayPeriod(e,{width:"abbreviated",context:"formatting"})||t.dayPeriod(e,{width:"narrow",context:"formatting"});case"bbbbb":return t.dayPeriod(e,{width:"narrow",context:"formatting"});default:return t.dayPeriod(e,{width:"wide",context:"formatting"})||t.dayPeriod(e,{width:"abbreviated",context:"formatting"})||t.dayPeriod(e,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(e,n,t){return e.setUTCHours(ra(t),0,0,0),e}}]),t}(Ir),Ta=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",80),br(fr(e),"incompatibleTokens",["a","b","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"B":case"BB":case"BBB":return t.dayPeriod(e,{width:"abbreviated",context:"formatting"})||t.dayPeriod(e,{width:"narrow",context:"formatting"});case"BBBBB":return t.dayPeriod(e,{width:"narrow",context:"formatting"});default:return t.dayPeriod(e,{width:"wide",context:"formatting"})||t.dayPeriod(e,{width:"abbreviated",context:"formatting"})||t.dayPeriod(e,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(e,n,t){return e.setUTCHours(ra(t),0,0,0),e}}]),t}(Ir),Da=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",70),br(fr(e),"incompatibleTokens",["H","K","k","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"h":return Jr(Ur,e);case"ho":return t.ordinalNumber(e,{unit:"hour"});default:return na(n.length,e)}}},{key:"validate",value:function(e,n){return n>=1&&n<=12}},{key:"set",value:function(e,n,t){var r=e.getUTCHours()>=12;return r&&t<12?e.setUTCHours(t+12,0,0,0):r||12!==t?e.setUTCHours(t,0,0,0):e.setUTCHours(0,0,0,0),e}}]),t}(Ir),Ma=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",70),br(fr(e),"incompatibleTokens",["a","b","h","K","k","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"H":return Jr(Sr,e);case"Ho":return t.ordinalNumber(e,{unit:"hour"});default:return na(n.length,e)}}},{key:"validate",value:function(e,n){return n>=0&&n<=23}},{key:"set",value:function(e,n,t){return e.setUTCHours(t,0,0,0),e}}]),t}(Ir),Ea=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",70),br(fr(e),"incompatibleTokens",["h","H","k","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"K":return Jr(Nr,e);case"Ko":return t.ordinalNumber(e,{unit:"hour"});default:return na(n.length,e)}}},{key:"validate",value:function(e,n){return n>=0&&n<=11}},{key:"set",value:function(e,n,t){return e.getUTCHours()>=12&&t<12?e.setUTCHours(t+12,0,0,0):e.setUTCHours(t,0,0,0),e}}]),t}(Ir),Sa=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",70),br(fr(e),"incompatibleTokens",["a","b","h","H","K","t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"k":return Jr(Yr,e);case"ko":return t.ordinalNumber(e,{unit:"hour"});default:return na(n.length,e)}}},{key:"validate",value:function(e,n){return n>=1&&n<=24}},{key:"set",value:function(e,n,t){var r=t<=24?t%24:t;return e.setUTCHours(r,0,0,0),e}}]),t}(Ir),Ya=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",60),br(fr(e),"incompatibleTokens",["t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"m":return Jr(Or,e);case"mo":return t.ordinalNumber(e,{unit:"minute"});default:return na(n.length,e)}}},{key:"validate",value:function(e,n){return n>=0&&n<=59}},{key:"set",value:function(e,n,t){return e.setUTCMinutes(t,0,0),e}}]),t}(Ir),Na=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",50),br(fr(e),"incompatibleTokens",["t","T"]),e}return yr(t,[{key:"parse",value:function(e,n,t){switch(n){case"s":return Jr(Fr,e);case"so":return t.ordinalNumber(e,{unit:"second"});default:return na(n.length,e)}}},{key:"validate",value:function(e,n){return n>=0&&n<=59}},{key:"set",value:function(e,n,t){return e.setUTCSeconds(t,0),e}}]),t}(Ir),Ua=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",30),br(fr(e),"incompatibleTokens",["t","T"]),e}return yr(t,[{key:"parse",value:function(e,n){return _r(na(n.length,e),(function(e){return Math.floor(e*Math.pow(10,3-n.length))}))}},{key:"set",value:function(e,n,t){return e.setUTCMilliseconds(t),e}}]),t}(Ir),Oa=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",10),br(fr(e),"incompatibleTokens",["t","T","x"]),e}return yr(t,[{key:"parse",value:function(e,n){switch(n){case"X":return Kr(Gr,e);case"XX":return Kr(Xr,e);case"XXXX":return Kr(Zr,e);case"XXXXX":return Kr($r,e);default:return Kr(Vr,e)}}},{key:"set",value:function(e,n,t){return n.timestampIsSet?e:new Date(e.getTime()-t)}}]),t}(Ir),Fa=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",10),br(fr(e),"incompatibleTokens",["t","T","X"]),e}return yr(t,[{key:"parse",value:function(e,n){switch(n){case"x":return Kr(Gr,e);case"xx":return Kr(Xr,e);case"xxxx":return Kr(Zr,e);case"xxxxx":return Kr($r,e);default:return Kr(Vr,e)}}},{key:"set",value:function(e,n,t){return n.timestampIsSet?e:new Date(e.getTime()-t)}}]),t}(Ir),Ha=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",40),br(fr(e),"incompatibleTokens","*"),e}return yr(t,[{key:"parse",value:function(e){return ea(e)}},{key:"set",value:function(e,n,t){return[new Date(1e3*t),{timestampIsSet:!0}]}}]),t}(Ir),Wa=function(e){Ar(t,e);var n=gr(t);function t(){var e;pr(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return br(fr(e=n.call.apply(n,[this].concat(a))),"priority",20),br(fr(e),"incompatibleTokens","*"),e}return yr(t,[{key:"parse",value:function(e){return ea(e)}},{key:"set",value:function(e,n,t){return[new Date(t),{timestampIsSet:!0}]}}]),t}(Ir),Pa={G:new kr,y:new ia,Y:new ua,R:new sa,u:new la,Q:new ca,q:new da,M:new fa,L:new ha,w:new Aa,I:new va,d:new ma,D:new wa,E:new ba,e:new Ca,c:new xa,i:new Ba,a:new Ia,b:new ka,B:new Ta,h:new Da,H:new Ma,K:new Ea,k:new Sa,m:new Ya,s:new Na,S:new Ua,X:new Oa,x:new Fa,t:new Ha,T:new Wa},ja=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,La=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ra=/^'([^]*?)'?$/,qa=/''/g,za=/\S/,Qa=/[a-zA-Z]/;function Ga(e,n,t,u){var s,l,c,d,f,h,A,v,g,p,w,y,b,C,x,I,k,T;o(3,arguments);var D=String(e),M=String(n),E=m(),S=null!==(s=null!==(l=null==u?void 0:u.locale)&&void 0!==l?l:E.locale)&&void 0!==s?s:qn;if(!S.match)throw new RangeError("locale must contain match property");var Y=a(null!==(c=null!==(d=null!==(f=null!==(h=null==u?void 0:u.firstWeekContainsDate)&&void 0!==h?h:null==u||null===(A=u.locale)||void 0===A||null===(v=A.options)||void 0===v?void 0:v.firstWeekContainsDate)&&void 0!==f?f:E.firstWeekContainsDate)&&void 0!==d?d:null===(g=E.locale)||void 0===g||null===(p=g.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==c?c:1);if(!(Y>=1&&Y<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var N=a(null!==(w=null!==(y=null!==(b=null!==(C=null==u?void 0:u.weekStartsOn)&&void 0!==C?C:null==u||null===(x=u.locale)||void 0===x||null===(I=x.options)||void 0===I?void 0:I.weekStartsOn)&&void 0!==b?b:E.weekStartsOn)&&void 0!==y?y:null===(k=E.locale)||void 0===k||null===(T=k.options)||void 0===T?void 0:T.weekStartsOn)&&void 0!==w?w:0);if(!(N>=0&&N<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===M)return""===D?i(t):new Date(NaN);var U,O={firstWeekContainsDate:Y,weekStartsOn:N,locale:S},F=[new Br],H=M.match(La).map((function(e){var n=e[0];return n in En?(0,En[n])(e,S.formatLong):e})).join("").match(ja),W=[],P=dr(H);try{var j=function(){var n=U.value;null!=u&&u.useAdditionalWeekYearTokens||!Un(n)||On(n,M,e),null!=u&&u.useAdditionalDayOfYearTokens||!Nn(n)||On(n,M,e);var t=n[0],r=Pa[t];if(r){var a=r.incompatibleTokens;if(Array.isArray(a)){var o=W.find((function(e){return a.includes(e.token)||e.token===t}));if(o)throw new RangeError("The format string mustn't contain `".concat(o.fullToken,"` and `").concat(n,"` at the same time"))}else if("*"===r.incompatibleTokens&&W.length>0)throw new RangeError("The format string mustn't contain `".concat(n,"` and any other token at the same time"));W.push({token:t,fullToken:n});var i=r.run(D,n,S.match,O);if(!i)return{v:new Date(NaN)};F.push(i.setter),D=i.rest}else{if(t.match(Qa))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");if("''"===n?n="'":"'"===t&&(n=n.match(Ra)[1].replace(qa,"'")),0!==D.indexOf(n))return{v:new Date(NaN)};D=D.slice(n.length)}};for(P.s();!(U=P.n()).done;){var L=j();if("object"===r(L))return L.v}}catch(e){P.e(e)}finally{P.f()}if(D.length>0&&za.test(D))return new Date(NaN);var R=F.map((function(e){return e.priority})).sort((function(e,n){return n-e})).filter((function(e,n,t){return t.indexOf(e)===n})).map((function(e){return F.filter((function(n){return n.priority===e})).sort((function(e,n){return n.subPriority-e.subPriority}))})).map((function(e){return e[0]})),q=i(t);if(isNaN(q.getTime()))return new Date(NaN);var z,Q=hn(q,B(q)),G={},X=dr(R);try{for(X.s();!(z=X.n()).done;){var Z=z.value;if(!Z.validate(Q,O))return new Date(NaN);var V=Z.set(Q,G,O);Array.isArray(V)?(Q=V[0],$n(G,V[1])):Q=V}}catch(e){X.e(e)}finally{X.f()}return Q}function Xa(e,n,t){return o(2,arguments),de(Ga(e,n,new Date,t))}function Za(e){return o(1,arguments),1===i(e).getDay()}function Va(e){return o(1,arguments),i(e).getTime()<Date.now()}function $a(e){o(1,arguments);var n=i(e);return n.setMinutes(0,0,0),n}function _a(e,n){o(2,arguments);var t=$a(e),r=$a(n);return t.getTime()===r.getTime()}function Ja(e,n,t){o(2,arguments);var r=y(e,t),a=y(n,t);return r.getTime()===a.getTime()}function Ka(e,n){return o(2,arguments),Ja(e,n,{weekStartsOn:1})}function eo(e,n){o(2,arguments);var t=x(e),r=x(n);return t.getTime()===r.getTime()}function no(e,n){o(2,arguments);var t=Re(e),r=Re(n);return t.getTime()===r.getTime()}function to(e,n){o(2,arguments);var t=i(e),r=i(n);return t.getFullYear()===r.getFullYear()&&t.getMonth()===r.getMonth()}function ro(e,n){o(2,arguments);var t=Qe(e),r=Qe(n);return t.getTime()===r.getTime()}function ao(e){o(1,arguments);var n=i(e);return n.setMilliseconds(0),n}function oo(e,n){o(2,arguments);var t=ao(e),r=ao(n);return t.getTime()===r.getTime()}function io(e,n){o(2,arguments);var t=i(e),r=i(n);return t.getFullYear()===r.getFullYear()}function uo(e){return o(1,arguments),_a(Date.now(),e)}function so(e){return o(1,arguments),Ka(e,Date.now())}function lo(e){return o(1,arguments),no(Date.now(),e)}function co(e){return o(1,arguments),to(Date.now(),e)}function fo(e){return o(1,arguments),ro(Date.now(),e)}function ho(e){return o(1,arguments),oo(Date.now(),e)}function Ao(e,n){return o(1,arguments),Ja(e,Date.now(),n)}function vo(e){return o(1,arguments),io(e,Date.now())}function go(e){return o(1,arguments),4===i(e).getDay()}function po(e){return o(1,arguments),le(e,Date.now())}function mo(e){return o(1,arguments),le(e,u(Date.now(),1))}function wo(e){return o(1,arguments),2===i(e).getDay()}function yo(e){return o(1,arguments),3===i(e).getDay()}function bo(e,n){o(2,arguments);var t=i(e).getTime(),r=i(n.start).getTime(),a=i(n.end).getTime();if(!(r<=a))throw new RangeError("Invalid interval");return t>=r&&t<=a}function Co(e,n){return o(2,arguments),u(e,-a(n))}function xo(e){return o(1,arguments),le(e,Co(Date.now(),1))}function Bo(e){o(1,arguments);var n=i(e),t=n.getFullYear(),r=9+10*Math.floor(t/10);return n.setFullYear(r+1,0,0),n.setHours(0,0,0,0),n}function Io(e,n){var t,r,u,s,l,c,d,f;o(1,arguments);var h=m(),A=a(null!==(t=null!==(r=null!==(u=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(l=n.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==u?u:h.weekStartsOn)&&void 0!==r?r:null===(d=h.locale)||void 0===d||null===(f=d.options)||void 0===f?void 0:f.weekStartsOn)&&void 0!==t?t:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6");var v=i(e),g=v.getDay(),p=6+(g<A?-7:0)-(g-A);return v.setHours(0,0,0,0),v.setDate(v.getDate()+p),v}function ko(e){return o(1,arguments),Io(e,{weekStartsOn:1})}function To(e){o(1,arguments);var n=C(e),t=new Date(0);t.setFullYear(n+1,0,4),t.setHours(0,0,0,0);var r=b(t);return r.setDate(r.getDate()-1),r}function Do(e){o(1,arguments);var n=i(e),t=n.getMonth(),r=t-t%3+3;return n.setMonth(r,0),n.setHours(0,0,0,0),n}function Mo(e){o(1,arguments);var n=i(e),t=n.getFullYear();return n.setFullYear(t+1,0,0),n.setHours(0,0,0,0),n}var Eo=/(\w)\1*|''|'(''|[^'])+('|$)|./g,So=/^'([^]*?)'?$/,Yo=/''/g,No=/[a-zA-Z]/;function Uo(e,n){o(2,arguments);var t=i(e);if(!de(t))throw new RangeError("Invalid time value");var r=hn(t,B(t)),a=n.match(Eo);return a?a.map((function(e){if("''"===e)return"'";var n,t,a=e[0];if("'"===a)return(t=(n=e).match(So))?t[1].replace(Yo,"'"):n;var o=Cn[a];if(o)return o(r,e);if(a.match(No))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return e})).join(""):""}var Oo=365.2425;function Fo(e){var n=e.years,t=e.months,r=e.weeks,a=e.days,i=e.hours,u=e.minutes,s=e.seconds;o(1,arguments);var l=0;n&&(l+=n*Oo),t&&(l+=t*(Oo/12)),r&&(l+=7*r),a&&(l+=a);var c=24*l*60*60;return i&&(c+=60*i*60),u&&(c+=60*u),s&&(c+=s),Math.round(1e3*c)}function Ho(e){o(1,arguments);var n=e/Z;return Math.floor(n)}function Wo(e){o(1,arguments);var n=e/X;return Math.floor(n)}function Po(e){o(1,arguments);var n=e/V;return Math.floor(n)}function jo(e){o(1,arguments);var n=e/_;return Math.floor(n)}function Lo(e){return o(1,arguments),Math.floor(e*X)}function Ro(e){return o(1,arguments),Math.floor(e*te)}function qo(e){o(1,arguments);var n=e/J;return Math.floor(n)}function zo(e){o(1,arguments);var n=e/K;return Math.floor(n)}function Qo(e,n){o(2,arguments);var t=n-Ct(e);return t<=0&&(t+=7),u(e,t)}function Go(e){return o(1,arguments),Qo(e,5)}function Xo(e){return o(1,arguments),Qo(e,1)}function Zo(e){return o(1,arguments),Qo(e,6)}function Vo(e){return o(1,arguments),Qo(e,0)}function $o(e){return o(1,arguments),Qo(e,4)}function _o(e){return o(1,arguments),Qo(e,2)}function Jo(e){return o(1,arguments),Qo(e,3)}function Ko(e,n){var t;o(1,arguments);var r=a(null!==(t=null==n?void 0:n.additionalDigits)&&void 0!==t?t:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var i,u=function(e){var n,t={},r=e.split(ei.dateTimeDelimiter);if(r.length>2)return t;if(/:/.test(r[0])?n=r[0]:(t.date=r[0],n=r[1],ei.timeZoneDelimiter.test(t.date)&&(t.date=e.split(ei.timeZoneDelimiter)[0],n=e.substr(t.date.length,e.length))),n){var a=ei.timezone.exec(n);a?(t.time=n.replace(a[1],""),t.timezone=a[1]):t.time=n}return t}(e);if(u.date){var s=function(e,n){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+n)+"})|(\\d{2}|[+-]\\d{"+(2+n)+"})$)"),r=e.match(t);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:e.slice((r[1]||r[2]).length)}}(u.date,r);i=function(e,n){if(null===n)return new Date(NaN);var t=e.match(ni);if(!t)return new Date(NaN);var r=!!t[4],a=ai(t[1]),o=ai(t[2])-1,i=ai(t[3]),u=ai(t[4]),s=ai(t[5])-1;if(r)return function(e,n,t){return n>=1&&n<=53&&t>=0&&t<=6}(0,u,s)?function(e,n,t){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(n-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(n,u,s):new Date(NaN);var l=new Date(0);return function(e,n,t){return n>=0&&n<=11&&t>=1&&t<=(ii[n]||(ui(e)?29:28))}(n,o,i)&&function(e,n){return n>=1&&n<=(ui(e)?366:365)}(n,a)?(l.setUTCFullYear(n,o,Math.max(a,i)),l):new Date(NaN)}(s.restDateString,s.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var l,c=i.getTime(),d=0;if(u.time&&(d=function(e){var n=e.match(ti);if(!n)return NaN;var t=oi(n[1]),r=oi(n[2]),a=oi(n[3]);return function(e,n,t){return 24===e?0===n&&0===t:t>=0&&t<60&&n>=0&&n<60&&e>=0&&e<25}(t,r,a)?t*Z+r*X+1e3*a:NaN}(u.time),isNaN(d)))return new Date(NaN);if(!u.timezone){var f=new Date(c+d),h=new Date(0);return h.setFullYear(f.getUTCFullYear(),f.getUTCMonth(),f.getUTCDate()),h.setHours(f.getUTCHours(),f.getUTCMinutes(),f.getUTCSeconds(),f.getUTCMilliseconds()),h}return l=function(e){if("Z"===e)return 0;var n=e.match(ri);if(!n)return 0;var t="+"===n[1]?-1:1,r=parseInt(n[2]),a=n[3]&&parseInt(n[3])||0;return function(e,n){return n>=0&&n<=59}(0,a)?t*(r*Z+a*X):NaN}(u.timezone),isNaN(l)?new Date(NaN):new Date(c+d+l)}var ei={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},ni=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,ti=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,ri=/^([+-])(\d{2})(?::?(\d{2}))?$/;function ai(e){return e?parseInt(e):1}function oi(e){return e&&parseFloat(e.replace(",","."))||0}var ii=[31,null,31,30,31,30,31,31,30,31,30,31];function ui(e){return e%400==0||e%4==0&&e%100!=0}function si(e){if(o(1,arguments),"string"==typeof e){var n=e.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);return n?new Date(Date.UTC(+n[1],+n[2]-1,+n[3],+n[4]-(+n[9]||0)*("-"==n[8]?-1:1),+n[5]-(+n[10]||0)*("-"==n[8]?-1:1),+n[6],+((n[7]||"0")+"00").substring(0,3))):new Date(NaN)}return i(e)}function li(e,n){o(2,arguments);var t=Ct(e)-n;return t<=0&&(t+=7),Co(e,t)}function ci(e){return o(1,arguments),li(e,5)}function di(e){return o(1,arguments),li(e,1)}function fi(e){return o(1,arguments),li(e,6)}function hi(e){return o(1,arguments),li(e,0)}function Ai(e){return o(1,arguments),li(e,4)}function vi(e){return o(1,arguments),li(e,2)}function gi(e){return o(1,arguments),li(e,3)}function pi(e){return o(1,arguments),Math.floor(e*J)}function mi(e){o(1,arguments);var n=e/ee;return Math.floor(n)}function wi(e,n){var t;if(arguments.length<1)throw new TypeError("1 argument required, but only none provided present");var r=a(null!==(t=null==n?void 0:n.nearestTo)&&void 0!==t?t:1);if(r<1||r>30)throw new RangeError("`options.nearestTo` must be between 1 and 30");var o=i(e),u=o.getSeconds(),s=o.getMinutes()+u/60,l=Te(null==n?void 0:n.roundingMethod)(s/r)*r,c=s%r,d=Math.round(c/r)*r;return new Date(o.getFullYear(),o.getMonth(),o.getDate(),o.getHours(),l+d)}function yi(e){o(1,arguments);var n=e/ne;return Math.floor(n)}function bi(e){return o(1,arguments),e*V}function Ci(e){o(1,arguments);var n=e/te;return Math.floor(n)}function xi(e,n){o(2,arguments);var t=i(e),r=a(n),u=t.getFullYear(),s=t.getDate(),l=new Date(0);l.setFullYear(u,r,15),l.setHours(0,0,0,0);var c=Bt(l);return t.setMonth(r,Math.min(s,c)),t}function Bi(e,n){if(o(2,arguments),"object"!==r(n)||null===n)throw new RangeError("values parameter must be an object");var t=i(e);return isNaN(t.getTime())?new Date(NaN):(null!=n.year&&t.setFullYear(n.year),null!=n.month&&(t=xi(t,n.month)),null!=n.date&&t.setDate(a(n.date)),null!=n.hours&&t.setHours(a(n.hours)),null!=n.minutes&&t.setMinutes(a(n.minutes)),null!=n.seconds&&t.setSeconds(a(n.seconds)),null!=n.milliseconds&&t.setMilliseconds(a(n.milliseconds)),t)}function Ii(e,n){o(2,arguments);var t=i(e),r=a(n);return t.setDate(r),t}function ki(e,n,t){var r,s,l,c,d,f,h,A;o(2,arguments);var v=m(),g=a(null!==(r=null!==(s=null!==(l=null!==(c=null==t?void 0:t.weekStartsOn)&&void 0!==c?c:null==t||null===(d=t.locale)||void 0===d||null===(f=d.options)||void 0===f?void 0:f.weekStartsOn)&&void 0!==l?l:v.weekStartsOn)&&void 0!==s?s:null===(h=v.locale)||void 0===h||null===(A=h.options)||void 0===A?void 0:A.weekStartsOn)&&void 0!==r?r:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=i(e),w=a(n),y=p.getDay(),b=7-g;return u(p,w<0||w>6?w-(y+b)%7:((w%7+7)%7+b)%7-(y+b)%7)}function Ti(e,n){o(2,arguments);var t=i(e),r=a(n);return t.setMonth(0),t.setDate(r),t}function Di(e){o(1,arguments);var n={},t=m();for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(void 0===e[a]?delete n[a]:n[a]=e[a]);w(n)}function Mi(e,n){o(2,arguments);var t=i(e),r=a(n);return t.setHours(r),t}function Ei(e,n){o(2,arguments);var t=i(e);return u(t,a(n)-Et(t))}function Si(e,n){o(2,arguments);var t=i(e),r=a(n),u=Yt(t)-r;return t.setDate(t.getDate()-7*u),t}function Yi(e,n){o(2,arguments);var t=i(e),r=a(n);return t.setMilliseconds(r),t}function Ni(e,n){o(2,arguments);var t=i(e),r=a(n);return t.setMinutes(r),t}function Ui(e,n){o(2,arguments);var t=i(e),r=a(n)-(Math.floor(t.getMonth()/3)+1);return xi(t,t.getMonth()+3*r)}function Oi(e,n){o(2,arguments);var t=i(e),r=a(n);return t.setSeconds(r),t}function Fi(e,n,t){o(2,arguments);var r=i(e),u=a(n),s=Gt(r,t)-u;return r.setDate(r.getDate()-7*s),r}function Hi(e,n,t){var r,u,s,l,c,d,f,h;o(2,arguments);var A=m(),v=a(null!==(r=null!==(u=null!==(s=null!==(l=null==t?void 0:t.firstWeekContainsDate)&&void 0!==l?l:null==t||null===(c=t.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==s?s:A.firstWeekContainsDate)&&void 0!==u?u:null===(f=A.locale)||void 0===f||null===(h=f.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==r?r:1),g=i(e),p=a(n),w=T(g,zt(g,t)),y=new Date(0);return y.setFullYear(p,0,v),y.setHours(0,0,0,0),(g=zt(y,t)).setDate(g.getDate()+w),g}function Wi(e,n){o(2,arguments);var t=i(e),r=a(n);return isNaN(t.getTime())?new Date(NaN):(t.setFullYear(r),t)}function Pi(e){o(1,arguments);var n=i(e),t=n.getFullYear(),r=10*Math.floor(t/10);return n.setFullYear(r,0,1),n.setHours(0,0,0,0),n}function ji(){return I(Date.now())}function Li(){var e=new Date,n=e.getFullYear(),t=e.getMonth(),r=e.getDate(),a=new Date(0);return a.setFullYear(n,t,r+1),a.setHours(0,0,0,0),a}function Ri(){var e=new Date,n=e.getFullYear(),t=e.getMonth(),r=e.getDate(),a=new Date(0);return a.setFullYear(n,t,r-1),a.setHours(0,0,0,0),a}function qi(e,n){return o(2,arguments),s(e,-a(n))}function zi(e,n){if(o(2,arguments),!n||"object"!==r(n))return new Date(NaN);var t=n.years?a(n.years):0,i=n.months?a(n.months):0,u=n.weeks?a(n.weeks):0,s=n.days?a(n.days):0,l=n.hours?a(n.hours):0,c=n.minutes?a(n.minutes):0,d=n.seconds?a(n.seconds):0,f=Co(qi(e,i+12*t),s+7*u),h=1e3*(d+60*(c+60*l));return new Date(f.getTime()-h)}function Qi(e,n){return o(2,arguments),h(e,-a(n))}function Gi(e,n){return o(2,arguments),g(e,-a(n))}function Xi(e,n){return o(2,arguments),S(e,-a(n))}function Zi(e,n){return o(2,arguments),Y(e,-a(n))}function Vi(e,n){return o(2,arguments),N(e,-a(n))}function $i(e,n){return o(2,arguments),U(e,-a(n))}function _i(e,n){return o(2,arguments),O(e,-a(n))}function Ji(e){return o(1,arguments),Math.floor(e*z)}function Ki(e){return o(1,arguments),Math.floor(e*K)}function eu(e){return o(1,arguments),Math.floor(e*ee)}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],u=0;u<e.length;u++){var s=e[u],l=r.base?s[0]+r.base:s[0],c=o[l]||0,d="".concat(l," ").concat(c);o[l]=c+1;var f=t(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)n[f].references++,n[f].updater(h);else{var A=a(h,r);r.byIndex=u,n.splice(u,0,{identifier:d,updater:A,references:1})}i.push(d)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var u=t(o[i]);n[u].references--}for(var s=r(e,a),l=0;l<o.length;l++){var c=t(o[l]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}o=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},796:(e,n,t)=>{e.exports=t.p+"1328873abf6e78be8505.ttf"},42:(e,n,t)=>{e.exports=t.p+"70ea61695b2df17a1cbe.ttf"},678:(e,n,t)=>{e.exports=t.p+"6b94fddb8d4c93098251.ttf"},670:(e,n,t)=>{e.exports=t.p+"12db0f392e0961f65ba0.ttf"}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!e;)e=r[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),o=t(569),u=t.n(o),s=t(565),l=t.n(s),c=t(216),d=t.n(c),f=t(589),h=t.n(f),A=t(28),v={};v.styleTagTransform=h(),v.setAttributes=l(),v.insert=u().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=d(),n()(A.Z,v),A.Z&&A.Z.locals&&A.Z.locals;const g=t.p+"60870f0ff5447edbc2b4.svg",p=t.p+"f11021803f68852df283.png",m=t.p+"0f08352c4a5afea875fa.svg",w=t.p+"300dbaba721fd9339364.svg",y=t.p+"43f9ac6671dc51ddf948.svg";let b=[];class C{constructor(e,n,t,r="noSection"){this.id=b.length,this.title=e,this.date=n,this.priority=t,this.list=r,this.complete=!1,this.createTask(this)}createTask(){b.push(this)}}const x=[];class B{constructor(e){this.id=x.length,this.name=e,this.createProject()}createProject(){x.push(this)}}const I=document.getElementById("lists");function k(){for(;I.hasChildNodes();)I.removeChild(I.firstChild);x.forEach((function(e){console.log("showProjects called !!!!");const n=document.createElement("div");n.classList.add("project"),n.innerHTML=e.name,I.appendChild(n)}))}const T=document.querySelectorAll(".project");for(i of T)i.addEventListener("click",(function(){console.log(this)}));const D=document.getElementById("content"),{format:M,addDays:E,isThisWeek:S,differenceInDays:Y,parseISO:N}=t(105),U=document.getElementById("content");const O=document.getElementById("addList"),{format:F,addDays:H,isThisWeek:W,differenceInDays:P,parseISO:j}=t(105),L=document.getElementById("inbox"),R=document.getElementById("content"),{format:q,addDays:z,isThisWeek:Q,differenceInDays:G,parseISO:X}=t(105),{format:Z,addDays:V,isThisWeek:$,differenceInDays:_,parseISO:J}=t(105);console.log("beginning"),document.getElementById("headerText");const K=document.getElementById("headerIcon"),ee=(document.getElementById("footerText"),document.getElementById("footerIcon")),ne=document.getElementById("inboxIcon"),te=document.getElementById("todayIcon"),re=document.getElementById("weekIcon");document.getElementById("inbox"),document.getElementById("content"),document.getElementById("popup"),document.getElementById("all"),document.getElementById("addProjectBtn"),document.getElementById("addProjectInput"),function(){const e=document.getElementById("popup"),n=document.getElementById("all");document.getElementById("submitPopup").addEventListener("click",(t=>{t.preventDefault();const r=document.getElementById("taskName");let a=r.value;const o=document.getElementById("dueDate");let i=o.value,u=document.getElementById("options").value;if(null==a||""==a||null==i||""==i)alert("please fill all fileds to add the task");else{console.log("valid input");let t=content.firstChild.textContent;const s=new C(a,i,u,t);r.value="",o.value="",console.log(s),e.classList.remove("active"),n.classList.remove("disable")}}))}(),function(){const e=document.getElementById("popup"),n=document.getElementById("all");document.getElementById("cancelTaskFrom").addEventListener("click",(t=>{t.preventDefault(),e.classList.remove("active"),n.classList.remove("disable");const r=document.getElementById("taskName"),a=document.getElementById("dueDate"),o=document.getElementById("options");r.value="",a.value="",o.value=""}))}(),console.log("out"),O.addEventListener("submit",(e=>{if(e.preventDefault(),console.log("btn clicked"),console.log("textContent = "+addProjectInput.value),""!=addProjectInput.value){new B(addProjectInput.value),addProjectInput.value="",console.log("done successfully!"),k();const e=document.querySelectorAll(".project");console.log("# of .project elements = "+e.length),e.forEach((e=>{console.log(e),e.addEventListener("click",(function(){console.log(this),function(e){U.innerHTML=e.innerHTML,function(e){for(D.innerHTML="",D.textContent="";D.hasChildNodes();)D.removeChild(D.children[0]);const n=document.createElement("div");n.innerHTML=e,D.appendChild(n),b.forEach((n=>{if(n.list==e){const e=document.createElement("div"),t=document.createElement("div");t.setAttribute("id","check"),t.classList.add("check");const r=document.createElement("div"),a=document.createElement("div"),o=document.createElement("div"),i=document.createElement("div");o.classList.add("left"),i.classList.add("right"),e.classList.add("task"),a.innerHTML=n.title;let u=n.date,s=n.priority;console.log(u+" = haha");const l=N(u),c=M(l,"dd/MM/yyyy");t.setAttribute("id",n.priority),t.innerHTML=" ",r.innerHTML=c,D.appendChild(e),o.appendChild(t),o.appendChild(a),i.appendChild(r),e.appendChild(o),e.appendChild(i),D.append(e),t.classList.add(s)}})),console.log("from showRelatedTasks")}(e.innerHTML);const n=document.createElement("button");n.setAttribute("id","addTask"),n.innerHTML="+",U.appendChild(n)}(e);const n=document.getElementById("addTask"),t=document.getElementById("popup"),r=document.getElementById("all");console.log("in handle click add task btn"),n.addEventListener("click",(()=>{console.log("add task clicked"),t.classList.add("active"),r.classList.add("disable")}))}))}))}})),L.addEventListener("click",(function(){for(;R.hasChildNodes();)R.removeChild(R.childNodes[0]);const e=document.createElement("div");e.innerHTML="All Tasks",R.appendChild(e),b.forEach((e=>{const n=document.createElement("div"),t=document.createElement("div");t.setAttribute("id","check"),t.classList.add("check");const r=document.createElement("div"),a=document.createElement("div"),o=document.createElement("div"),i=document.createElement("div");o.classList.add("left"),i.classList.add("right"),n.classList.add("task"),a.innerHTML=e.title;let u=e.date,s=e.priority;console.log(u+" = haha");const l=j(u),c=F(l,"dd/MM/yyyy");t.setAttribute("id",e.priority),t.innerHTML=" ",r.innerHTML=c,R.appendChild(n),o.appendChild(t),o.appendChild(a),i.appendChild(r),n.appendChild(o),n.appendChild(i),R.append(n),t.classList.add(s)}))})),K.src=g,ee.src=p,ne.src=m,te.src=y,re.src=w,new C("Study lecture 7 in Database","2023-04-10","op1"),console.log(b),b.forEach((function(e){console.log("showTasks called !!!!");const n=document.createElement("div"),t=document.createElement("div"),r=document.createElement("div");content.appendChild(n),n.appendChild(t),n.appendChild(r),t.innerHTML=e.title,r.innerHTML=e.date})),function(){let e=new Date,n=e.getFullYear(),t=e.getMonth()+1,r=e.getDate();t<10&&(t="0"+t),r<10&&(r="0"+r);const a=n+"-"+t+"-"+r,o=document.getElementById("today");console.log("listened"),o.addEventListener("click",(function(){const e=document.getElementById("content");for(;e.hasChildNodes();)e.removeChild(e.childNodes[0]);const n=document.createElement("div");n.innerHTML="Today",e.appendChild(n),b.forEach((n=>{if(a==n.date){const t=document.createElement("div"),r=document.createElement("div");r.setAttribute("id","check"),r.classList.add("check");const a=document.createElement("div"),o=document.createElement("div"),i=document.createElement("div"),u=document.createElement("div");i.classList.add("left"),u.classList.add("right"),t.classList.add("task"),o.innerHTML=n.title;let s=n.date,l=n.priority;console.log(s+" = haha");const c=X(s),d=q(c,"dd/MM/yyyy");r.setAttribute("id",n.priority),r.innerHTML=" ",a.innerHTML=d,e.appendChild(t),i.appendChild(r),i.appendChild(o),u.appendChild(a),t.appendChild(i),t.appendChild(u),e.append(t),r.classList.add(l)}}))}))}(),new B("Courses"),new B("Home"),k(),document.getElementById("week").addEventListener("click",(function(){for(content.innerHTML="";content.firstChild;)content.removeChild(content.firstChild);const e=document.createElement("div");e.innerHTML="This Week",content.appendChild(e),b.forEach((e=>{const n=e.date,t=new Date,r=V(t,7),a=Z(t,"yyyy-MM-dd"),o=Z(r,"yyyy-MM-dd"),i=J(a),u=J(o),s=J(n),l=_(u,s),c=_(s,i);if(console.log(a),console.log(o),console.log(n),console.log(),l>=0&&c>=0){const n=document.createElement("div"),t=document.createElement("div");t.setAttribute("id","check"),t.classList.add("check");const r=document.createElement("div"),a=document.createElement("div"),o=document.createElement("div"),i=document.createElement("div");o.classList.add("left"),i.classList.add("right"),n.classList.add("task"),a.innerHTML=e.title;let u=e.date,s=e.priority;console.log(u+" = haha");const l=J(u),c=Z(l,"dd/MM/yyyy");t.setAttribute("id",e.priority),t.innerHTML=" ",r.innerHTML=c,content.appendChild(n),o.appendChild(t),o.appendChild(a),i.appendChild(r),n.appendChild(o),n.appendChild(i),content.append(n),t.classList.add(s)}}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,